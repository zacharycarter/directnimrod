## DirectX bindings by Charlie Barto
# interface __MIDL_itf_d3d11_0000_0000 
# [local]
{.link: "dxguid.lib".}
{.link: "d3d11.lib".}
import windows, dxgi, d3dcommon, macros
export d3dcommon
type IID = TIID
type GUID = TGUID
type UINT = uint32
type INT = int32
type FLOAT = float32
type BYTE = TBYTE
type BOOL = WINBOOL
type UINT8 = uint8
type UINT64 = uint64
type IUnknown = object
const 
  D3D11_16BIT_INDEX_STRIP_CUT_VALUE* = (0x0000FFFF)
  D3D11_32BIT_INDEX_STRIP_CUT_VALUE* = (0xFFFFFFFF)
  D3D11_8BIT_INDEX_STRIP_CUT_VALUE* = (0x000000FF)
  D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT* = (9)
  D3D11_CLIP_OR_CULL_DISTANCE_COUNT* = (8)
  D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT* = (2)
  D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT* = (14)
  D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS* = (4)
  D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT* = (32)
  D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT* = (15)
  D3D11_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT* = (
    16)
  D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS* = (4)
  D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT* = (15)
  D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST* = (1)
  D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS* = (1)
  D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT* = (64)
  D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS* = (4)
  D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT* = (1)
  D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST* = (1)
  D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS* = (1)
  D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT* = (32)
  D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS* = (1)
  D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT* = (128)
  D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST* = (1)
  D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS* = (1)
  D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT* = (128)
  D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS* = (1)
  D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT* = (16)
  D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST* = (1)
  D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS* = (1)
  D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT* = (16)
  D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT* = (32)
  D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS* = (4)
  D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_COMMONSHADER_TEMP_REGISTER_COUNT* = (4096)
  D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST* = (3)
  D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS* = (3)
  D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX* = (10)
  D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN* = (- 10)
  D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE* = (- 8)
  D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE* = (7)
  D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD* = (256)
  D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP* = (64)
  D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD* = (240)
  D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP* = (68)
  D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD* = (224)
  D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP* = (72)
  D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD* = (208)
  D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP* = (76)
  D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD* = (192)
  D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP* = (84)
  D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD* = (176)
  D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP* = (92)
  D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD* = (160)
  D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP* = (100)
  D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD* = (144)
  D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP* = (112)
  D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD* = (128)
  D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP* = (128)
  D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD* = (112)
  D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP* = (144)
  D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD* = (96)
  D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP* = (168)
  D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD* = (80)
  D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP* = (204)
  D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD* = (64)
  D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP* = (256)
  D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD* = (48)
  D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP* = (340)
  D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD* = (32)
  D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP* = (512)
  D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD* = (16)
  D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP* = (768)
  D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION* = (1)
  D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT* = (256)
  D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP* = (768)
  D3D11_CS_4_X_THREAD_GROUP_MAX_X* = (768)
  D3D11_CS_4_X_THREAD_GROUP_MAX_Y* = (768)
  D3D11_CS_4_X_UAV_REGISTER_COUNT* = (1)
  D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION* = (65535)
  D3D11_CS_TGSM_REGISTER_COUNT* = (8192)
  D3D11_CS_TGSM_REGISTER_READS_PER_INST* = (1)
  D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS* = (1)
  D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS* = (1)
  D3D11_CS_THREADGROUPID_REGISTER_COMPONENTS* = (3)
  D3D11_CS_THREADGROUPID_REGISTER_COUNT* = (1)
  D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS* = (1)
  D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT* = (1)
  D3D11_CS_THREADIDINGROUP_REGISTER_COMPONENTS* = (3)
  D3D11_CS_THREADIDINGROUP_REGISTER_COUNT* = (1)
  D3D11_CS_THREADID_REGISTER_COMPONENTS* = (3)
  D3D11_CS_THREADID_REGISTER_COUNT* = (1)
  D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP* = (1024)
  D3D11_CS_THREAD_GROUP_MAX_X* = (1024)
  D3D11_CS_THREAD_GROUP_MAX_Y* = (1024)
  D3D11_CS_THREAD_GROUP_MAX_Z* = (64)
  D3D11_CS_THREAD_GROUP_MIN_X* = (1)
  D3D11_CS_THREAD_GROUP_MIN_Y* = (1)
  D3D11_CS_THREAD_GROUP_MIN_Z* = (1)
  D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL* = (16384)
  D3D11_DEFAULT_BLEND_FACTOR_ALPHA* = (1.0000000000000000e+000)
  D3D11_DEFAULT_BLEND_FACTOR_BLUE* = (1.0000000000000000e+000)
  D3D11_DEFAULT_BLEND_FACTOR_GREEN* = (1.0000000000000000e+000)
  D3D11_DEFAULT_BLEND_FACTOR_RED* = (1.0000000000000000e+000)
  D3D11_DEFAULT_BORDER_COLOR_COMPONENT* = (0.0000000000000000e+000)
  D3D11_DEFAULT_DEPTH_BIAS* = (0)
  D3D11_DEFAULT_DEPTH_BIAS_CLAMP* = (0.0000000000000000e+000)
  D3D11_DEFAULT_MAX_ANISOTROPY* = (16)
  D3D11_DEFAULT_MIP_LOD_BIAS* = (0.0000000000000000e+000)
  D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX* = (0)
  D3D11_DEFAULT_SAMPLE_MASK* = (0xFFFFFFFF)
  D3D11_DEFAULT_SCISSOR_ENDX* = (0)
  D3D11_DEFAULT_SCISSOR_ENDY* = (0)
  D3D11_DEFAULT_SCISSOR_STARTX* = (0)
  D3D11_DEFAULT_SCISSOR_STARTY* = (0)
  D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS* = (0.0000000000000000e+000)
  D3D11_DEFAULT_STENCIL_READ_MASK* = (0x000000FF)
  D3D11_DEFAULT_STENCIL_REFERENCE* = (0)
  D3D11_DEFAULT_STENCIL_WRITE_MASK* = (0x000000FF)
  D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX* = (0)
  D3D11_DEFAULT_VIEWPORT_HEIGHT* = (0)
  D3D11_DEFAULT_VIEWPORT_MAX_DEPTH* = (0.0000000000000000e+000)
  D3D11_DEFAULT_VIEWPORT_MIN_DEPTH* = (0.0000000000000000e+000)
  D3D11_DEFAULT_VIEWPORT_TOPLEFTX* = (0)
  D3D11_DEFAULT_VIEWPORT_TOPLEFTY* = (0)
  D3D11_DEFAULT_VIEWPORT_WIDTH* = (0)
  D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS* = (3968)
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS* = (4)
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT* = (32)
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST* = (2)
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS* = (1)
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS* = (3)
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT* = (1)
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST* = (2)
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS* = (1)
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS* = (4)
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT* = (32)
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST* = (2)
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS* = (1)
  D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS* = (1)
  D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT* = (1)
  D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST* = (2)
  D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS* = (1)
  D3D11_DS_OUTPUT_REGISTER_COMPONENTS* = (4)
  D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_DS_OUTPUT_REGISTER_COUNT* = (32)
  D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP* = (5.9999999999999998e-001)
  D3D11_FLOAT32_MAX* = (3.4028234660000002e+038)
  D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP* = (5.9999999999999998e-001)
  D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR* = (2.3999999999999999e+000)
  D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR* = (1.0000000000000000e+000)
  D3D11_FLOAT_TO_SRGB_OFFSET* = (5.5000000000000000e-002)
  D3D11_FLOAT_TO_SRGB_SCALE_1* = (1.2920000000000000e+001)
  D3D11_FLOAT_TO_SRGB_SCALE_2* = (1.0549999999999999e+000)
  D3D11_FLOAT_TO_SRGB_THRESHOLD* = (3.1308000000000000e-003)
  D3D11_FTOI_INSTRUCTION_MAX_INPUT* = (2.1474836479990001e+009)
  D3D11_FTOI_INSTRUCTION_MIN_INPUT* = (- 2.1474836489990001e+009)
  D3D11_FTOU_INSTRUCTION_MAX_INPUT* = (4.2949672959990001e+009)
  D3D11_FTOU_INSTRUCTION_MIN_INPUT* = (0.0000000000000000e+000)
  D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST* = (2)
  D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS* = (1)
  D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS* = (1)
  D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT* = (1)
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS* = (1)
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT* = (1)
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST* = (2)
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS* = (1)
  D3D11_GS_INPUT_REGISTER_COMPONENTS* = (4)
  D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_GS_INPUT_REGISTER_COUNT* = (32)
  D3D11_GS_INPUT_REGISTER_READS_PER_INST* = (2)
  D3D11_GS_INPUT_REGISTER_READ_PORTS* = (1)
  D3D11_GS_INPUT_REGISTER_VERTICES* = (32)
  D3D11_GS_MAX_INSTANCE_COUNT* = (32)
  D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES* = (1024)
  D3D11_GS_OUTPUT_ELEMENTS* = (32)
  D3D11_GS_OUTPUT_REGISTER_COMPONENTS* = (4)
  D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_GS_OUTPUT_REGISTER_COUNT* = (32)
  D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT* = (32)
  D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT* = (32)
  D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS* = (4)
  D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST* = (2)
  D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS* = (1)
  D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND* = (0xFFFFFFFF)
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS* = (1)
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT* = (1)
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST* = (2)
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS* = (1)
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS* = (1)
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT* = (1)
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST* = (2)
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS* = (1)
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS* = (1)
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT* = (1)
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST* = (2)
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS* = (1)
  D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND* = (0xFFFFFFFF)
  D3D11_HS_MAXTESSFACTOR_LOWER_BOUND* = (1.0000000000000000e+000)
  D3D11_HS_MAXTESSFACTOR_UPPER_BOUND* = (6.4000000000000000e+001)
  D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS* = (3968)
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS* = (1)
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT* = (1)
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST* = (2)
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS* = (1)
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS* = (4)
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT* = (32)
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST* = (2)
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS* = (1)
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS* = (128)
  D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES* = (0)
  D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY* = (0)
  D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES* = (0)
  D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT* = (1)
  D3D11_IA_INSTANCE_ID_BIT_COUNT* = (32)
  D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT* = (32)
  D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT* = (32)
  D3D11_IA_PRIMITIVE_ID_BIT_COUNT* = (32)
  D3D11_IA_VERTEX_ID_BIT_COUNT* = (32)
  D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT* = (32)
  D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS* = (128)
  D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT* = (32)
  D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT* = (0xFFFFFFFF)
  D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER* = (0xFFFFFFFF)
  D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL* = (0xFFFFFFFF)
  D3D11_KEEP_UNORDERED_ACCESS_VIEWS* = (0xFFFFFFFF)
  D3D11_LINEAR_GAMMA* = (1.0000000000000000e+000)
  D3D11_MAJOR_VERSION* = (11)
  D3D11_MAX_BORDER_COLOR_COMPONENT* = (1.0000000000000000e+000)
  D3D11_MAX_DEPTH* = (1.0000000000000000e+000)
  D3D11_MAX_MAXANISOTROPY* = (16)
  D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT* = (32)
  D3D11_MAX_POSITION_VALUE* = (3.4028234660000004e+034)
  D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP* = (17)
  D3D11_MINOR_VERSION* = (0)
  D3D11_MIN_BORDER_COLOR_COMPONENT* = (0.0000000000000000e+000)
  D3D11_MIN_DEPTH* = (0.0000000000000000e+000)
  D3D11_MIN_MAXANISOTROPY* = (0)
  D3D11_MIP_LOD_BIAS_MAX* = (1.5990000000000000e+001)
  D3D11_MIP_LOD_BIAS_MIN* = (- 1.6000000000000000e+001)
  D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT* = (8)
  D3D11_MIP_LOD_RANGE_BIT_COUNT* = (8)
  D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH* = (1.3999999999999999e+000)
  D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT* = (0)
  D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT* = (15)
  D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT* = (16)
  D3D11_PS_CS_UAV_REGISTER_COMPONENTS* = (1)
  D3D11_PS_CS_UAV_REGISTER_COUNT* = (8)
  D3D11_PS_CS_UAV_REGISTER_READS_PER_INST* = (1)
  D3D11_PS_CS_UAV_REGISTER_READ_PORTS* = (1)
  D3D11_PS_FRONTFACING_DEFAULT_VALUE* = (0xFFFFFFFF)
  D3D11_PS_FRONTFACING_FALSE_VALUE* = (0)
  D3D11_PS_FRONTFACING_TRUE_VALUE* = (0xFFFFFFFF)
  D3D11_PS_INPUT_REGISTER_COMPONENTS* = (4)
  D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_PS_INPUT_REGISTER_COUNT* = (32)
  D3D11_PS_INPUT_REGISTER_READS_PER_INST* = (2)
  D3D11_PS_INPUT_REGISTER_READ_PORTS* = (1)
  D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT* = (0.0000000000000000e+000)
  D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS* = (1)
  D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT* = (1)
  D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS* = (1)
  D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_PS_OUTPUT_MASK_REGISTER_COUNT* = (1)
  D3D11_PS_OUTPUT_REGISTER_COMPONENTS* = (4)
  D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_PS_OUTPUT_REGISTER_COUNT* = (8)
  D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT* = (5.0000000000000000e-001)
  D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT* = (16)
  D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE* = (4096)
  D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP* = (27)
  D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT* = (4096)
  D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE* = (4096)
  D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP* = (32)
  D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP* = (32)
  D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION* = (16384)
  D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT* = (1024)
  D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT* = (4096)
  D3D11_REQ_MAXANISOTROPY* = (16)
  D3D11_REQ_MIP_LEVELS* = (15)
  D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES* = (2048)
  D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE* = (4096)
  D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH* = (16384)
  D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM* = (128)
  D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM* = (
    2.5000000000000000e-001)
  D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM* = (2048)
  D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP* = (20)
  D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE* = (4096)
  D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION* = (2048)
  D3D11_REQ_TEXTURE1D_U_DIMENSION* = (16384)
  D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION* = (2048)
  D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION* = (16384)
  D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION* = (2048)
  D3D11_REQ_TEXTURECUBE_DIMENSION* = (16384)
  D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL* = (0)
  D3D11_SHADER_MAJOR_VERSION* = (5)
  D3D11_SHADER_MAX_INSTANCES* = (65535)
  D3D11_SHADER_MAX_INTERFACES* = (253)
  D3D11_SHADER_MAX_INTERFACE_CALL_SITES* = (4096)
  D3D11_SHADER_MAX_TYPES* = (65535)
  D3D11_SHADER_MINOR_VERSION* = (0)
  D3D11_SHIFT_INSTRUCTION_PAD_VALUE* = (0)
  D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT* = (5)
  D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT* = (8)
  D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES* = (2048)
  D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES* = (512)
  D3D11_SO_BUFFER_SLOT_COUNT* = (4)
  D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP* = (0xFFFFFFFF)
  D3D11_SO_NO_RASTERIZED_STREAM* = (0xFFFFFFFF)
  D3D11_SO_OUTPUT_COMPONENT_COUNT* = (128)
  D3D11_SO_STREAM_COUNT* = (4)
  D3D11_SPEC_DATE_DAY* = (16)
  D3D11_SPEC_DATE_MONTH* = (0o000000000005)
  D3D11_SPEC_DATE_YEAR* = (2011)
  D3D11_SPEC_VERSION* = (1.0700000000000001e+000)
  D3D11_SRGB_GAMMA* = (2.2000000000000002e+000)
  D3D11_SRGB_TO_FLOAT_DENOMINATOR_1* = (1.2920000000000000e+001)
  D3D11_SRGB_TO_FLOAT_DENOMINATOR_2* = (1.0549999999999999e+000)
  D3D11_SRGB_TO_FLOAT_EXPONENT* = (2.3999999999999999e+000)
  D3D11_SRGB_TO_FLOAT_OFFSET* = (5.5000000000000000e-002)
  D3D11_SRGB_TO_FLOAT_THRESHOLD* = (4.0450000000000000e-002)
  D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP* = (5.0000000000000000e-001)
  D3D11_STANDARD_COMPONENT_BIT_COUNT* = (32)
  D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED* = (64)
  D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE* = (4)
  D3D11_STANDARD_PIXEL_COMPONENT_COUNT* = (128)
  D3D11_STANDARD_PIXEL_ELEMENT_COUNT* = (32)
  D3D11_STANDARD_VECTOR_SIZE* = (4)
  D3D11_STANDARD_VERTEX_ELEMENT_COUNT* = (32)
  D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT* = (64)
  D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT* = (8)
  D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT* = (8)
  D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR* = (64)
  D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR* = (64)
  D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR* = (63)
  D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR* = (64)
  D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR* = (2)
  D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR* = (1)
  D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR* = (1)
  D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT* = (16)
  D3D11_UNBOUND_MEMORY_ACCESS_RESULT* = (0)
  D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX* = (15)
  D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE* = (16)
  D3D11_VIEWPORT_BOUNDS_MAX* = (32767)
  D3D11_VIEWPORT_BOUNDS_MIN* = (- 32768)
  D3D11_VS_INPUT_REGISTER_COMPONENTS* = (4)
  D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_VS_INPUT_REGISTER_COUNT* = (32)
  D3D11_VS_INPUT_REGISTER_READS_PER_INST* = (2)
  D3D11_VS_INPUT_REGISTER_READ_PORTS* = (1)
  D3D11_VS_OUTPUT_REGISTER_COMPONENTS* = (4)
  D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT* = (32)
  D3D11_VS_OUTPUT_REGISTER_COUNT* = (32)
  D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT* = (10)
  D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP* = (25)
  D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP* = (25)
  D3D11_1_UAV_SLOT_COUNT* = (64)
  D3D11_2_TILED_RESOURCE_TILE_SIZE_IN_BYTES* = (65536)
const 
  U_FACD3D11 = (0x0000087C)
  U_FACD3D11DEBUG = ((U_FACD3D11 + 1))

# Direct3D errors are now found in winerror.h 

template MAKE_D3D11_HRESULT*(code: expr): expr = 
  MAKE_HRESULT(1, U_FACD3D11, code)

template MAKE_D3D11_STATUS*(code: expr): expr = 
  MAKE_HRESULT(0, U_FACD3D11, code)
#enums
type
  D3D11_INPUT_CLASSIFICATION* {.size: sizeof(cint).} = enum 
    D3D11_INPUT_PER_VERTEX_DATA = 0, D3D11_INPUT_PER_INSTANCE_DATA = 1
  D3D11_FILL_MODE* {.size: sizeof(cint).} = enum 
    D3D11_FILL_WIREFRAME = 2, D3D11_FILL_SOLID = 3
  D3D11_CULL_MODE* {.size: sizeof(cint).} = enum 
    D3D11_CULL_NONE = 1, D3D11_CULL_FRONT = 2, D3D11_CULL_BACK = 3
  D3D11_RESOURCE_DIMENSION* {.size: sizeof(cint).} = enum 
    D3D11_RESOURCE_DIMENSION_UNKNOWN = 0, D3D11_RESOURCE_DIMENSION_BUFFER = 1, 
    D3D11_RESOURCE_DIMENSION_TEXTURE1D = 2, 
    D3D11_RESOURCE_DIMENSION_TEXTURE2D = 3, 
    D3D11_RESOURCE_DIMENSION_TEXTURE3D = 4
  D3D11_SRV_DIMENSION* = D3D_SRV_DIMENSION
  D3D11_DSV_DIMENSION* {.size: sizeof(cint).} = enum 
    D3D11_DSV_DIMENSION_UNKNOWN = 0, D3D11_DSV_DIMENSION_TEXTURE1D = 1, 
    D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 2, D3D11_DSV_DIMENSION_TEXTURE2D = 3, 
    D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 4, D3D11_DSV_DIMENSION_TEXTURE2DMS = 5, 
    D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
  D3D11_RTV_DIMENSION* {.size: sizeof(cint).} = enum 
    D3D11_RTV_DIMENSION_UNKNOWN = 0, D3D11_RTV_DIMENSION_BUFFER = 1, 
    D3D11_RTV_DIMENSION_TEXTURE1D = 2, D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 3, 
    D3D11_RTV_DIMENSION_TEXTURE2D = 4, D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 5, 
    D3D11_RTV_DIMENSION_TEXTURE2DMS = 6, 
    D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 7, D3D11_RTV_DIMENSION_TEXTURE3D = 8
  D3D11_UAV_DIMENSION* {.size: sizeof(cint).} = enum 
    D3D11_UAV_DIMENSION_UNKNOWN = 0, D3D11_UAV_DIMENSION_BUFFER = 1, 
    D3D11_UAV_DIMENSION_TEXTURE1D = 2, D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 3, 
    D3D11_UAV_DIMENSION_TEXTURE2D = 4, D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 5, 
    D3D11_UAV_DIMENSION_TEXTURE3D = 8
  D3D11_USAGE* {.size: sizeof(cint).} = enum 
    D3D11_USAGE_DEFAULT = 0, D3D11_USAGE_IMMUTABLE = 1, D3D11_USAGE_DYNAMIC = 2, 
    D3D11_USAGE_STAGING = 3
  D3D11_BIND_FLAG* {.size: sizeof(cint).} = enum 
    D3D11_BIND_VERTEX_BUFFER = 0x00000001, D3D11_BIND_INDEX_BUFFER = 0x00000002, 
    D3D11_BIND_CONSTANT_BUFFER = 0x00000004, 
    D3D11_BIND_SHADER_RESOURCE = 0x00000008, 
    D3D11_BIND_STREAM_OUTPUT = 0x00000010, 
    D3D11_BIND_RENDER_TARGET = 0x00000020, 
    D3D11_BIND_DEPTH_STENCIL = 0x00000040, 
    D3D11_BIND_UNORDERED_ACCESS = 0x00000080, D3D11_BIND_DECODER = 0x00000200, 
    D3D11_BIND_VIDEO_ENCODER = 0x00000400
  D3D11_CPU_ACCESS_FLAG* {.size: sizeof(cint).} = enum 
    D3D11_CPU_ACCESS_WRITE = 0x00010000, D3D11_CPU_ACCESS_READ = 0x00020000
  D3D11_RESOURCE_MISC_FLAG* {.size: sizeof(cint).} = enum 
    D3D11_RESOURCE_MISC_GENERATE_MIPS = 0x00000001, 
    D3D11_RESOURCE_MISC_SHARED = 0x00000002, 
    D3D11_RESOURCE_MISC_TEXTURECUBE = 0x00000004, 
    D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = 0x00000010, 
    D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 0x00000020, 
    D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = 0x00000040, 
    D3D11_RESOURCE_MISC_RESOURCE_CLAMP = 0x00000080, 
    D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = 0x00000100, 
    D3D11_RESOURCE_MISC_GDI_COMPATIBLE = 0x00000200, 
    D3D11_RESOURCE_MISC_SHARED_NTHANDLE = 0x00000800, 
    D3D11_RESOURCE_MISC_RESTRICTED_CONTENT = 0x00001000, 
    D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE = 0x00002000, 
    D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER = 0x00004000, 
    D3D11_RESOURCE_MISC_GUARDED = 0x00008000, 
    D3D11_RESOURCE_MISC_TILE_POOL = 0x00020000, 
    D3D11_RESOURCE_MISC_TILED = 0x00040000
  D3D11_MAP* {.size: sizeof(cint).} = enum 
    D3D11_MAP_READ = 1, D3D11_MAP_WRITE = 2, D3D11_MAP_READ_WRITE = 3, 
    D3D11_MAP_WRITE_DISCARD = 4, D3D11_MAP_WRITE_NO_OVERWRITE = 5
  D3D11_MAP_FLAG* {.size: sizeof(cint).} = enum 
    D3D11_MAP_FLAG_DO_NOT_WAIT = 0x00100000
  D3D11_RAISE_FLAG* {.size: sizeof(cint).} = enum 
    D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 0x00000001
  D3D11_CLEAR_FLAG* {.size: sizeof(cint).} = enum 
    D3D11_CLEAR_DEPTH = 0x00000001, D3D11_CLEAR_STENCIL = 0x00000002
  D3D11_COMPARISON_FUNC* {.size: sizeof(cint).} = enum 
    D3D11_COMPARISON_NEVER = 1, D3D11_COMPARISON_LESS = 2, 
    D3D11_COMPARISON_EQUAL = 3, D3D11_COMPARISON_LESS_EQUAL = 4, 
    D3D11_COMPARISON_GREATER = 5, D3D11_COMPARISON_NOT_EQUAL = 6, 
    D3D11_COMPARISON_GREATER_EQUAL = 7, D3D11_COMPARISON_ALWAYS = 8
  D3D11_DEPTH_WRITE_MASK* {.size: sizeof(cint).} = enum 
    D3D11_DEPTH_WRITE_MASK_ZERO = 0, D3D11_DEPTH_WRITE_MASK_ALL = 1
  D3D11_STENCIL_OP* {.size: sizeof(cint).} = enum 
    D3D11_STENCIL_OP_KEEP = 1, D3D11_STENCIL_OP_ZERO = 2, 
    D3D11_STENCIL_OP_REPLACE = 3, D3D11_STENCIL_OP_INCR_SAT = 4, 
    D3D11_STENCIL_OP_DECR_SAT = 5, D3D11_STENCIL_OP_INVERT = 6, 
    D3D11_STENCIL_OP_INCR = 7, D3D11_STENCIL_OP_DECR = 8
  D3D11_BLEND* {.size: sizeof(cint).} = enum 
    D3D11_BLEND_ZERO = 1, D3D11_BLEND_ONE = 2, D3D11_BLEND_SRC_COLOR = 3, 
    D3D11_BLEND_INV_SRC_COLOR = 4, D3D11_BLEND_SRC_ALPHA = 5, 
    D3D11_BLEND_INV_SRC_ALPHA = 6, D3D11_BLEND_DEST_ALPHA = 7, 
    D3D11_BLEND_INV_DEST_ALPHA = 8, D3D11_BLEND_DEST_COLOR = 9, 
    D3D11_BLEND_INV_DEST_COLOR = 10, D3D11_BLEND_SRC_ALPHA_SAT = 11, 
    D3D11_BLEND_BLEND_FACTOR = 14, D3D11_BLEND_INV_BLEND_FACTOR = 15, 
    D3D11_BLEND_SRC1_COLOR = 16, D3D11_BLEND_INV_SRC1_COLOR = 17, 
    D3D11_BLEND_SRC1_ALPHA = 18, D3D11_BLEND_INV_SRC1_ALPHA = 19
  D3D11_BLEND_OP* {.size: sizeof(cint).} = enum 
    D3D11_BLEND_OP_ADD = 1, D3D11_BLEND_OP_SUBTRACT = 2, 
    D3D11_BLEND_OP_REV_SUBTRACT = 3, D3D11_BLEND_OP_MIN = 4, 
    D3D11_BLEND_OP_MAX = 5
  D3D11_COLOR_WRITE_ENABLE* {.size: sizeof(cint).} = enum 
    D3D11_COLOR_WRITE_ENABLE_RED = 1, D3D11_COLOR_WRITE_ENABLE_GREEN = 2, 
    D3D11_COLOR_WRITE_ENABLE_BLUE = 4, D3D11_COLOR_WRITE_ENABLE_ALPHA = 8, D3D11_COLOR_WRITE_ENABLE_ALL = (((
    1 or 2) or 4) or 8)
  D3D11_TEXTURECUBE_FACE* {.size: sizeof(cint).} = enum 
    D3D11_TEXTURECUBE_FACE_POSITIVE_X = 0, 
    D3D11_TEXTURECUBE_FACE_NEGATIVE_X = 1, 
    D3D11_TEXTURECUBE_FACE_POSITIVE_Y = 2, 
    D3D11_TEXTURECUBE_FACE_NEGATIVE_Y = 3, 
    D3D11_TEXTURECUBE_FACE_POSITIVE_Z = 4, D3D11_TEXTURECUBE_FACE_NEGATIVE_Z = 5
  D3D11_BUFFEREX_SRV_FLAG* {.size: sizeof(cint).} = enum 
    D3D11_BUFFEREX_SRV_FLAG_RAW = 0x00000001
  D3D11_FILTER* {.size: sizeof(cint).} = enum 
    D3D11_FILTER_MIN_MAG_MIP_POINT = 0, 
    D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x00000001, 
    D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x00000004, 
    D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x00000005, 
    D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x00000010, 
    D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x00000011, 
    D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x00000014, 
    D3D11_FILTER_MIN_MAG_MIP_LINEAR = 0x00000015, 
    D3D11_FILTER_ANISOTROPIC = 0x00000055, 
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x00000080, 
    D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x00000081, 
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x00000084, 
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x00000085, 
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x00000090, 
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x00000091, 
    D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x00000094, 
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x00000095, 
    D3D11_FILTER_COMPARISON_ANISOTROPIC = 0x000000D5, 
    D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 0x00000100, 
    D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x00000101, 
    D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x00000104, 
    D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x00000105, 
    D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x00000110, 
    D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x00000111, 
    D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x00000114, 
    D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 0x00000115, 
    D3D11_FILTER_MINIMUM_ANISOTROPIC = 0x00000155, 
    D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 0x00000180, 
    D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x00000181, 
    D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x00000184, 
    D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x00000185, 
    D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x00000190, 
    D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x00000191, 
    D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x00000194, 
    D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 0x00000195, 
    D3D11_FILTER_MAXIMUM_ANISOTROPIC = 0x000001D5
  D3D11_FILTER_TYPE* {.size: sizeof(cint).} = enum 
    D3D11_FILTER_TYPE_POINT = 0, D3D11_FILTER_TYPE_LINEAR = 1
  D3D11_FILTER_REDUCTION_TYPE* {.size: sizeof(cint).} = enum 
    D3D11_FILTER_REDUCTION_TYPE_STANDARD = 0, 
    D3D11_FILTER_REDUCTION_TYPE_COMPARISON = 1, 
    D3D11_FILTER_REDUCTION_TYPE_MINIMUM = 2, 
    D3D11_FILTER_REDUCTION_TYPE_MAXIMUM = 3


  D3D11_TEXTURE_ADDRESS_MODE* {.size: sizeof(cint).} = enum 
    D3D11_TEXTURE_ADDRESS_WRAP = 1, D3D11_TEXTURE_ADDRESS_MIRROR = 2, 
    D3D11_TEXTURE_ADDRESS_CLAMP = 3, D3D11_TEXTURE_ADDRESS_BORDER = 4, 
    D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 5

  D3D11_FORMAT_SUPPORT* {.size: sizeof(cint).} = enum 
    D3D11_FORMAT_SUPPORT_BUFFER = 0x00000001, 
    D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 0x00000002, 
    D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER = 0x00000004, 
    D3D11_FORMAT_SUPPORT_SO_BUFFER = 0x00000008, 
    D3D11_FORMAT_SUPPORT_TEXTURE1D = 0x00000010, 
    D3D11_FORMAT_SUPPORT_TEXTURE2D = 0x00000020, 
    D3D11_FORMAT_SUPPORT_TEXTURE3D = 0x00000040, 
    D3D11_FORMAT_SUPPORT_TEXTURECUBE = 0x00000080, 
    D3D11_FORMAT_SUPPORT_SHADER_LOAD = 0x00000100, 
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE = 0x00000200, 
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 0x00000400, 
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 0x00000800, 
    D3D11_FORMAT_SUPPORT_MIP = 0x00001000, 
    D3D11_FORMAT_SUPPORT_MIP_AUTOGEN = 0x00002000, 
    D3D11_FORMAT_SUPPORT_RENDER_TARGET = 0x00004000, 
    D3D11_FORMAT_SUPPORT_BLENDABLE = 0x00008000, 
    D3D11_FORMAT_SUPPORT_DEPTH_STENCIL = 0x00010000, 
    D3D11_FORMAT_SUPPORT_CPU_LOCKABLE = 0x00020000, 
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 0x00040000, 
    D3D11_FORMAT_SUPPORT_DISPLAY = 0x00080000, 
    D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 0x00100000, 
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 0x00200000, 
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 0x00400000, 
    D3D11_FORMAT_SUPPORT_SHADER_GATHER = 0x00800000, 
    D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST = 0x01000000, 
    D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW = 0x02000000, 
    D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON = 0x04000000, 
    D3D11_FORMAT_SUPPORT_DECODER_OUTPUT = 0x08000000, 
    D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT = 0x10000000, 
    D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT = 0x20000000, 
    D3D11_FORMAT_SUPPORT_VIDEO_ENCODER = 0x40000000
  D3D11_FORMAT_SUPPORT2* {.size: sizeof(cint).} = enum 
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 0x00000001, 
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 0x00000002, D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x00000004, 
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 0x00000008, 
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 0x00000010, 
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 0x00000020, 
    D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 0x00000040, 
    D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE = 0x00000080, 
    D3D11_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 0x00000100, 
    D3D11_FORMAT_SUPPORT2_TILED = 0x00000200, 
    D3D11_FORMAT_SUPPORT2_SHAREABLE = 0x00000400
  D3D11_ASYNC_GETDATA_FLAG* {.size: sizeof(cint).} = enum 
    D3D11_ASYNC_GETDATA_DONOTFLUSH = 0x00000001
  D3D11_QUERY* {.size: sizeof(cint).} = enum 
    D3D11_QUERY_EVENT = 0, D3D11_QUERY_OCCLUSION = (0 + 1), 
    D3D11_QUERY_TIMESTAMP = (1 + 1), 
    D3D11_QUERY_TIMESTAMP_DISJOINT = (2 + 1), 
    D3D11_QUERY_PIPELINE_STATISTICS = (3 + 1), 
    D3D11_QUERY_OCCLUSION_PREDICATE = (4 + 1), 
    D3D11_QUERY_SO_STATISTICS = (5 + 1), 
    D3D11_QUERY_SO_OVERFLOW_PREDICATE = (6 + 1), 
    D3D11_QUERY_SO_STATISTICS_STREAM0 = (7 + 1), 
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = (8 + 1),
    D3D11_QUERY_SO_STATISTICS_STREAM1 = (9 + 1), 
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = (10 + 1), 
    D3D11_QUERY_SO_STATISTICS_STREAM2 = (11 + 1), 
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = (12 + 1), 
    D3D11_QUERY_SO_STATISTICS_STREAM3 = (13 + 1),
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = (14 + 1)
  D3D11_QUERY_MISC_FLAG* {.size: sizeof(cint).} = enum 
    D3D11_QUERY_MISC_PREDICATEHINT = 0x00000001
  D3D11_COUNTER* {.size: sizeof(cint).} = enum 
    D3D11_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000
  D3D11_COUNTER_TYPE* {.size: sizeof(cint).} = enum 
    D3D11_COUNTER_TYPE_FLOAT32 = 0, 
    D3D11_COUNTER_TYPE_UINT16 = (0 + 1), 
    D3D11_COUNTER_TYPE_UINT32 = (1 + 1), 
    D3D11_COUNTER_TYPE_UINT64 = (2 + 1)
  D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS* {.size: sizeof(cint).} = enum 
    D3D11_CENTER_MULTISAMPLE_PATTERN = 0xFFFFFFFE
    D3D11_STANDARD_MULTISAMPLE_PATTERN = 0xFFFFFFFF, 
  D3D11_DEVICE_CONTEXT_TYPE* {.size: sizeof(cint).} = enum 
    D3D11_DEVICE_CONTEXT_IMMEDIATE = 0, 
    D3D11_DEVICE_CONTEXT_DEFERRED = (1 + 1)
  D3D11_FEATURE* {.size: sizeof(cint).} = enum 
    D3D11_FEATURE_THREADING = 0, 
    D3D11_FEATURE_DOUBLES = (0 + 1), 
    D3D11_FEATURE_FORMAT_SUPPORT = (1 + 1), 
    D3D11_FEATURE_FORMAT_SUPPORT2 = (2 + 1), D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = (3 + 1), 
    D3D11_FEATURE_D3D11_OPTIONS = (4 + 1), 
    D3D11_FEATURE_ARCHITECTURE_INFO = (5 + 1), 
    D3D11_FEATURE_D3D9_OPTIONS = (6 + 1),
    D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT = ( 7 + 1),
    D3D11_FEATURE_D3D9_SHADOW_SUPPORT = ( 8 + 1),
    D3D11_FEATURE_D3D11_OPTIONS1 = (9 + 1), 
    D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT = ( 10 + 1), 
    D3D11_FEATURE_MARKER_SUPPORT = ( 11 + 1),
    D3D11_FEATURE_D3D9_OPTIONS1 = (12 + 1)
  D3D11_SHADER_MIN_PRECISION_SUPPORT* {.size: sizeof(cint).} = enum 
    D3D11_SHADER_MIN_PRECISION_10_BIT = 0x00000001, 
    D3D11_SHADER_MIN_PRECISION_16_BIT = 0x00000002
  D3D11_TILED_RESOURCES_TIER* {.size: sizeof(cint).} = enum 
    D3D11_TILED_RESOURCES_NOT_SUPPORTED = 0, D3D11_TILED_RESOURCES_TIER_1 = 1, 
    D3D11_TILED_RESOURCES_TIER_2 = 2
  D3D11_VIDEO_DECODER_BUFFER_TYPE* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS = 0, 
    D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL = 1, 
    D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE = 2, 
    D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL = 3, 
    D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX = 4, 
    D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL = 5, 
    D3D11_VIDEO_DECODER_BUFFER_BITSTREAM = 6, 
    D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR = 7, 
    D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN = 8
  D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT = 0x00000001, 
    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT = 0x00000002
  D3D11_VIDEO_PROCESSOR_DEVICE_CAPS* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_LINEAR_SPACE = 0x00000001, 
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_xvYCC = 0x00000002, 
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_RGB_RANGE_CONVERSION = 0x00000004, 
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 0x00000008, 
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_NOMINAL_RANGE = 0x00000010
  D3D11_VIDEO_PROCESSOR_FEATURE_CAPS* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_FILL = 0x00000001, 
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_CONSTRICTION = 0x00000002, 
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LUMA_KEY = 0x00000004, 
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_PALETTE = 0x00000008, 
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LEGACY = 0x00000010, 
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_STEREO = 0x00000020, 
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ROTATION = 0x00000040, 
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_STREAM = 0x00000080, 
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_PIXEL_ASPECT_RATIO = 0x00000100
  D3D11_VIDEO_PROCESSOR_FILTER_CAPS* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_BRIGHTNESS = 0x00000001, 
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_CONTRAST = 0x00000002, 
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_HUE = 0x00000004, 
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_SATURATION = 0x00000008, 
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_NOISE_REDUCTION = 0x00000010, 
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_EDGE_ENHANCEMENT = 0x00000020, 
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_ANAMORPHIC_SCALING = 0x00000040, 
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_STEREO_ADJUSTMENT = 0x00000080
  D3D11_VIDEO_PROCESSOR_FORMAT_CAPS* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_INTERLACED = 0x00000001, 
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_PROCAMP = 0x00000002, 
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_LUMA_KEY = 0x00000004, 
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_PALETTE_INTERLACED = 0x00000008
  D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DENOISE = 0x00000001, 
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DERINGING = 0x00000002, 
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_EDGE_ENHANCEMENT = 0x00000004, 
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_COLOR_CORRECTION = 0x00000008, 
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_FLESH_TONE_MAPPING = 0x00000010, 
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_IMAGE_STABILIZATION = 0x00000020, 
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_SUPER_RESOLUTION = 0x00000040, 
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_ANAMORPHIC_SCALING = 0x00000080
  D3D11_VIDEO_PROCESSOR_STEREO_CAPS* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_MONO_OFFSET = 0x00000001, 
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_ROW_INTERLEAVED = 0x00000002, 
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_COLUMN_INTERLEAVED = 0x00000004, 
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_CHECKERBOARD = 0x00000008, 
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_FLIP_MODE = 0x00000010
  D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND = 0x00000001, 
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB = 0x00000002, 
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = 0x00000004, D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 0x00000008, 
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE = 0x00000010, 
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = 0x00000020
  D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32 = 0x00000001, 
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_22 = 0x00000002, 
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2224 = 0x00000004, 
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2332 = 0x00000008, 
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32322 = 0x00000010, 
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_55 = 0x00000020, 
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_64 = 0x00000040, 
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_87 = 0x00000080, 
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223 = 0x00000100, 
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER = 0x80000000
  D3D11_CONTENT_PROTECTION_CAPS* {.size: sizeof(cint).} = enum 
    D3D11_CONTENT_PROTECTION_CAPS_SOFTWARE = 0x00000001, 
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE = 0x00000002, 
    D3D11_CONTENT_PROTECTION_CAPS_PROTECTION_ALWAYS_ON = 0x00000004, 
    D3D11_CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION = 0x00000008, 
    D3D11_CONTENT_PROTECTION_CAPS_CONTENT_KEY = 0x00000010, 
    D3D11_CONTENT_PROTECTION_CAPS_FRESHEN_SESSION_KEY = 0x00000020, 
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK = 0x00000040, 
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK_KEY = 0x00000080, 
    D3D11_CONTENT_PROTECTION_CAPS_SEQUENTIAL_CTR_IV = 0x00000100, 
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPT_SLICEDATA_ONLY = 0x00000200, 
    D3D11_CONTENT_PROTECTION_CAPS_DECRYPTION_BLT = 0x00000400
  D3D11_VIDEO_PROCESSOR_FILTER* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_PROCESSOR_FILTER_BRIGHTNESS = 0, 
    D3D11_VIDEO_PROCESSOR_FILTER_CONTRAST = 1, 
    D3D11_VIDEO_PROCESSOR_FILTER_HUE = 2, 
    D3D11_VIDEO_PROCESSOR_FILTER_SATURATION = 3, 
    D3D11_VIDEO_PROCESSOR_FILTER_NOISE_REDUCTION = 4, 
    D3D11_VIDEO_PROCESSOR_FILTER_EDGE_ENHANCEMENT = 5, 
    D3D11_VIDEO_PROCESSOR_FILTER_ANAMORPHIC_SCALING = 6, 
    D3D11_VIDEO_PROCESSOR_FILTER_STEREO_ADJUSTMENT = 7
  D3D11_VIDEO_FRAME_FORMAT* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_FRAME_FORMAT_PROGRESSIVE = 0, 
    D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1, 
    D3D11_VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2
  D3D11_VIDEO_USAGE* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_USAGE_PLAYBACK_NORMAL = 0, D3D11_VIDEO_USAGE_OPTIMAL_SPEED = 1, 
    D3D11_VIDEO_USAGE_OPTIMAL_QUALITY = 2
  D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_UNDEFINED = 0, 
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_16_235 = 1, 
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_0_255 = 2
  D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_OPAQUE = 0, 
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_BACKGROUND = 1, 
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_DESTINATION = 2, 
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM = 3
  D3D11_VIDEO_PROCESSOR_OUTPUT_RATE* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_NORMAL = 0, 
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_HALF = 1, 
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM = 2
  D3D11_VIDEO_PROCESSOR_STEREO_FORMAT* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO = 0, 
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_HORIZONTAL = 1, 
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_VERTICAL = 2, 
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE = 3, 
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET = 4, 
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_ROW_INTERLEAVED = 5, 
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_COLUMN_INTERLEAVED = 6, 
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_CHECKERBOARD = 7
  D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_NONE = 0, 
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME0 = 1, 
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME1 = 2
  D3D11_VIDEO_PROCESSOR_ROTATION* {.size: sizeof(cint).} = enum 
    D3D11_VIDEO_PROCESSOR_ROTATION_IDENTITY = 0, 
    D3D11_VIDEO_PROCESSOR_ROTATION_90 = 1, 
    D3D11_VIDEO_PROCESSOR_ROTATION_180 = 2, 
    D3D11_VIDEO_PROCESSOR_ROTATION_270 = 3
  D3D11_AUTHENTICATED_CHANNEL_TYPE* {.size: sizeof(cint).} = enum 
    D3D11_AUTHENTICATED_CHANNEL_D3D11 = 1, 
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE = 2, 
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE = 3
  D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE* {.size: sizeof(cint).} = enum 
    D3D11_PROCESSIDTYPE_UNKNOWN = 0, D3D11_PROCESSIDTYPE_DWM = 1, 
    D3D11_PROCESSIDTYPE_HANDLE = 2
  D3D11_BUS_TYPE* {.size: sizeof(cint).} = enum 
    D3D11_BUS_TYPE_OTHER = 0, D3D11_BUS_TYPE_PCI = 0x00000001, 
    D3D11_BUS_TYPE_PCIX = 0x00000002, D3D11_BUS_TYPE_PCIEXPRESS = 0x00000003, 
    D3D11_BUS_TYPE_AGP = 0x00000004, 
    D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET = 0x00010000, 
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 0x00020000, 
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 0x00030000, 
    D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 0x00040000, D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 0x00050000, 
    D3D11_BUS_IMPL_MODIFIER_NON_STANDARD = 0x80000000
  D3D11_VDOV_DIMENSION* {.size: sizeof(cint).} = enum 
    D3D11_VDOV_DIMENSION_UNKNOWN = 0, D3D11_VDOV_DIMENSION_TEXTURE2D = 1
  D3D11_VPIV_DIMENSION* {.size: sizeof(cint).} = enum 
    D3D11_VPIV_DIMENSION_UNKNOWN = 0, D3D11_VPIV_DIMENSION_TEXTURE2D = 1


# Direct3D errors are now found in winerror.h 
type
  D3D11_INPUT_ELEMENT_DESC* = object 
    SemanticName*: LPCSTR
    SemanticIndex*: UINT
    Format*: DXGI_FORMAT
    InputSlot*: UINT
    AlignedByteOffset*: UINT
    InputSlotClass*: D3D11_INPUT_CLASSIFICATION
    InstanceDataStepRate*: UINT

  #D3D11_PRIMITIVE_TOPOLOGY* = D3D_PRIMITIVE_TOPOLOGY
  D3D11_PRIMITIVE* = D3D_PRIMITIVE
  D3D11_SO_DECLARATION_ENTRY* = object 
    Stream*: UINT
    SemanticName*: LPCSTR
    SemanticIndex*: UINT
    StartComponent*: BYTE
    ComponentCount*: BYTE
    OutputSlot*: BYTE

  D3D11_VIEWPORT* = object 
    TopLeftX*: FLOAT
    TopLeftY*: FLOAT
    Width*: FLOAT
    Height*: FLOAT
    MinDepth*: FLOAT
    MaxDepth*: FLOAT

  D3D11_RECT* = RECT
  D3D11_BOX* = object 
    left*: UINT
    top*: UINT
    front*: UINT
    right*: UINT
    bottom*: UINT
    back*: UINT



  ID3D11DeviceChildVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11DeviceChild; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11DeviceChild): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11DeviceChild): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11DeviceChild; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11DeviceChild; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11DeviceChild; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11DeviceChild; guid: ptr GUID; 
                                    pData: ptr IUnknown): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
  
  ID3D11DeviceChild* = object 
    lpVtbl*: ptr ID3D11DeviceChildVtbl



  D3D11_DEPTH_STENCILOP_DESC* = object 
    StencilFailOp*: D3D11_STENCIL_OP
    StencilDepthFailOp*: D3D11_STENCIL_OP
    StencilPassOp*: D3D11_STENCIL_OP
    StencilFunc*: D3D11_COMPARISON_FUNC

  D3D11_DEPTH_STENCIL_DESC* = object 
    DepthEnable*: BOOL
    DepthWriteMask*: D3D11_DEPTH_WRITE_MASK
    DepthFunc*: D3D11_COMPARISON_FUNC
    StencilEnable*: BOOL
    StencilReadMask*: UINT8
    StencilWriteMask*: UINT8
    FrontFace*: D3D11_DEPTH_STENCILOP_DESC
    BackFace*: D3D11_DEPTH_STENCILOP_DESC



  ID3D11DepthStencilStateVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11DepthStencilState; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11DepthStencilState): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11DepthStencilState): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11DepthStencilState; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11DepthStencilState; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11DepthStencilState; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11DepthStencilState; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetDesc*: proc (This: ptr ID3D11DepthStencilState; 
                    pDesc: ptr D3D11_DEPTH_STENCIL_DESC) {.stdcall.} # 
                                                                     # [annotation] 
  
  ID3D11DepthStencilState* = object 
    lpVtbl*: ptr ID3D11DepthStencilStateVtbl



  D3D11_RENDER_TARGET_BLEND_DESC* = object 
    BlendEnable*: BOOL
    SrcBlend*: D3D11_BLEND
    DestBlend*: D3D11_BLEND
    BlendOp*: D3D11_BLEND_OP
    SrcBlendAlpha*: D3D11_BLEND
    DestBlendAlpha*: D3D11_BLEND
    BlendOpAlpha*: D3D11_BLEND_OP
    RenderTargetWriteMask*: UINT8

  D3D11_BLEND_DESC* = object 
    AlphaToCoverageEnable*: BOOL
    IndependentBlendEnable*: BOOL
    RenderTarget*: array[8, D3D11_RENDER_TARGET_BLEND_DESC]



  ID3D11BlendStateVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11BlendState; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11BlendState): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11BlendState): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11BlendState; ppDevice: ptr ptr ID3D11Device) {.
        stdcall.}             # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11BlendState; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11BlendState; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11BlendState; guid: ptr GUID; 
                                    pData: ptr IUnknown): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    GetDesc*: proc (This: ptr ID3D11BlendState; pDesc: ptr D3D11_BLEND_DESC) {.
        stdcall.}             # [annotation] 
  
  ID3D11BlendState* = object 
    lpVtbl*: ptr ID3D11BlendStateVtbl



  D3D11_RASTERIZER_DESC* = object 
    FillMode*: D3D11_FILL_MODE
    CullMode*: D3D11_CULL_MODE
    FrontCounterClockwise*: BOOL
    DepthBias*: INT
    DepthBiasClamp*: FLOAT
    SlopeScaledDepthBias*: FLOAT
    DepthClipEnable*: BOOL
    ScissorEnable*: BOOL
    MultisampleEnable*: BOOL
    AntialiasedLineEnable*: BOOL



  ID3D11RasterizerStateVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11RasterizerState; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11RasterizerState): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11RasterizerState): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11RasterizerState; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11RasterizerState; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11RasterizerState; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11RasterizerState; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetDesc*: proc (This: ptr ID3D11RasterizerState; 
                    pDesc: ptr D3D11_RASTERIZER_DESC) {.stdcall.} # [annotation] 
  
  ID3D11RasterizerState* = object 
    lpVtbl*: ptr ID3D11RasterizerStateVtbl



  D3D11_SUBRESOURCE_DATA* = object 
    pSysMem*: pointer
    SysMemPitch*: UINT
    SysMemSlicePitch*: UINT

  D3D11_MAPPED_SUBRESOURCE* = object 
    pData*: pointer
    RowPitch*: UINT
    DepthPitch*: UINT



  ID3D11ResourceVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11Resource; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11Resource): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11Resource): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11Resource; ppDevice: ptr ptr ID3D11Device) {.
        stdcall.}             # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11Resource; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11Resource; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11Resource; guid: ptr GUID; 
                                    pData: ptr IUnknown): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    GetType*: proc (This: ptr ID3D11Resource; 
                    pResourceDimension: ptr D3D11_RESOURCE_DIMENSION) {.stdcall.} # 
                                                                                  # [annotation] 
    SetEvictionPriority*: proc (This: ptr ID3D11Resource; EvictionPriority: UINT) {.
        stdcall.}             # [annotation] 
    GetEvictionPriority*: proc (This: ptr ID3D11Resource): UINT {.stdcall.}

  ID3D11Resource* = object 
    lpVtbl*: ptr ID3D11ResourceVtbl



  D3D11_BUFFER_DESC* = object 
    ByteWidth*: UINT
    Usage*: D3D11_USAGE
    BindFlags*: UINT
    CPUAccessFlags*: UINT
    MiscFlags*: UINT
    StructureByteStride*: UINT



  ID3D11BufferVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11Buffer; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11Buffer): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11Buffer): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11Buffer; ppDevice: ptr ptr ID3D11Device) {.
        stdcall.}             # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11Buffer; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11Buffer; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11Buffer; guid: ptr GUID; 
                                    pData: ptr IUnknown): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    GetType*: proc (This: ptr ID3D11Buffer; 
                    pResourceDimension: ptr D3D11_RESOURCE_DIMENSION) {.stdcall.} # 
                                                                                  # [annotation] 
    SetEvictionPriority*: proc (This: ptr ID3D11Buffer; EvictionPriority: UINT) {.
        stdcall.}             # [annotation] 
    GetEvictionPriority*: proc (This: ptr ID3D11Buffer): UINT {.stdcall.}
    GetDesc*: proc (This: ptr ID3D11Buffer; pDesc: ptr D3D11_BUFFER_DESC) {.
        stdcall.}             # [annotation] 
  
  ID3D11Buffer* = object 
    lpVtbl*: ptr ID3D11BufferVtbl



  D3D11_TEXTURE1D_DESC* = object 
    Width*: UINT
    MipLevels*: UINT
    ArraySize*: UINT
    Format*: DXGI_FORMAT
    Usage*: D3D11_USAGE
    BindFlags*: UINT
    CPUAccessFlags*: UINT
    MiscFlags*: UINT



  ID3D11Texture1DVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11Texture1D; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11Texture1D): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11Texture1D): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11Texture1D; ppDevice: ptr ptr ID3D11Device) {.
        stdcall.}             # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11Texture1D; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11Texture1D; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11Texture1D; guid: ptr GUID; 
                                    pData: ptr IUnknown): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    GetType*: proc (This: ptr ID3D11Texture1D; 
                    pResourceDimension: ptr D3D11_RESOURCE_DIMENSION) {.stdcall.} # 
                                                                                  # [annotation] 
    SetEvictionPriority*: proc (This: ptr ID3D11Texture1D; 
                                EvictionPriority: UINT) {.stdcall.} # [annotation] 
    GetEvictionPriority*: proc (This: ptr ID3D11Texture1D): UINT {.stdcall.}
    GetDesc*: proc (This: ptr ID3D11Texture1D; pDesc: ptr D3D11_TEXTURE1D_DESC) {.
        stdcall.}             # [annotation] 
  
  ID3D11Texture1D* = object 
    lpVtbl*: ptr ID3D11Texture1DVtbl



  D3D11_TEXTURE2D_DESC* = object 
    Width*: UINT
    Height*: UINT
    MipLevels*: UINT
    ArraySize*: UINT
    Format*: DXGI_FORMAT
    SampleDesc*: DXGI_SAMPLE_DESC
    Usage*: D3D11_USAGE
    BindFlags*: UINT
    CPUAccessFlags*: UINT
    MiscFlags*: UINT



  ID3D11Texture2DVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11Texture2D; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11Texture2D): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11Texture2D): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11Texture2D; ppDevice: ptr ptr ID3D11Device) {.
        stdcall.}             # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11Texture2D; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11Texture2D; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11Texture2D; guid: ptr GUID; 
                                    pData: ptr IUnknown): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    GetType*: proc (This: ptr ID3D11Texture2D; 
                    pResourceDimension: ptr D3D11_RESOURCE_DIMENSION) {.stdcall.} # 
                                                                                  # [annotation] 
    SetEvictionPriority*: proc (This: ptr ID3D11Texture2D; 
                                EvictionPriority: UINT) {.stdcall.} # [annotation] 
    GetEvictionPriority*: proc (This: ptr ID3D11Texture2D): UINT {.stdcall.}
    GetDesc*: proc (This: ptr ID3D11Texture2D; pDesc: ptr D3D11_TEXTURE2D_DESC) {.
        stdcall.}             # [annotation] 
  
  ID3D11Texture2D* = object 
    lpVtbl*: ptr ID3D11Texture2DVtbl



  D3D11_TEXTURE3D_DESC* = object 
    Width*: UINT
    Height*: UINT
    Depth*: UINT
    MipLevels*: UINT
    Format*: DXGI_FORMAT
    Usage*: D3D11_USAGE
    BindFlags*: UINT
    CPUAccessFlags*: UINT
    MiscFlags*: UINT



  ID3D11Texture3DVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11Texture3D; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11Texture3D): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11Texture3D): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11Texture3D; ppDevice: ptr ptr ID3D11Device) {.
        stdcall.}             # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11Texture3D; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11Texture3D; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11Texture3D; guid: ptr GUID; 
                                    pData: ptr IUnknown): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    GetType*: proc (This: ptr ID3D11Texture3D; 
                    pResourceDimension: ptr D3D11_RESOURCE_DIMENSION) {.stdcall.} # 
                                                                                  # [annotation] 
    SetEvictionPriority*: proc (This: ptr ID3D11Texture3D; 
                                EvictionPriority: UINT) {.stdcall.} # [annotation] 
    GetEvictionPriority*: proc (This: ptr ID3D11Texture3D): UINT {.stdcall.}
    GetDesc*: proc (This: ptr ID3D11Texture3D; pDesc: ptr D3D11_TEXTURE3D_DESC) {.
        stdcall.}             # [annotation] 
  
  ID3D11Texture3D* = object 
    lpVtbl*: ptr ID3D11Texture3DVtbl





  ID3D11ViewVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11View; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11View): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11View): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11View; ppDevice: ptr ptr ID3D11Device) {.
        stdcall.}             # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11View; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11View; guid: ptr GUID; DataSize: UINT; 
                           pData: pointer): HRESULT {.stdcall.} # [annotation] 
                                                                # [annotation] 
                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11View; guid: ptr GUID; 
                                    pData: ptr IUnknown): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    GetResource*: proc (This: ptr ID3D11View; ppResource: ptr ptr ID3D11Resource) {.
        stdcall.}             # [annotation] 
  
  ID3D11View* = object 
    lpVtbl*: ptr ID3D11ViewVtbl


  D3D11_BUFFER_SRV_FIRST* {.union.} = object
    FirstElement*: UINT
    ElementOffset*: UINT
  D3D11_BUFFER_SRV_NUM* {.union.} = object
    NumElements*: UINT
    ElementWidth*: UINT
  D3D11_BUFFER_SRV* = object
    First*: D3D11_BUFFER_SRV_FIRST
    Num*: D3D11_BUFFER_SRV_NUM

  D3D11_BUFFEREX_SRV* = object 
    FirstElement*: UINT
    NumElements*: UINT
    Flags*: UINT

  D3D11_TEX1D_SRV* = object 
    MostDetailedMip*: UINT
    MipLevels*: UINT

  D3D11_TEX1D_ARRAY_SRV* = object 
    MostDetailedMip*: UINT
    MipLevels*: UINT
    FirstArraySlice*: UINT
    ArraySize*: UINT

  D3D11_TEX2D_SRV* = object 
    MostDetailedMip*: UINT
    MipLevels*: UINT

  D3D11_TEX2D_ARRAY_SRV* = object 
    MostDetailedMip*: UINT
    MipLevels*: UINT
    FirstArraySlice*: UINT
    ArraySize*: UINT

  D3D11_TEX3D_SRV* = object 
    MostDetailedMip*: UINT
    MipLevels*: UINT

  D3D11_TEXCUBE_SRV* = object 
    MostDetailedMip*: UINT
    MipLevels*: UINT

  D3D11_TEXCUBE_ARRAY_SRV* = object 
    MostDetailedMip*: UINT
    MipLevels*: UINT
    First2DArrayFace*: UINT
    NumCubes*: UINT

  D3D11_TEX2DMS_SRV* = object 
    UnusedField_NothingToDefine*: UINT

  D3D11_TEX2DMS_ARRAY_SRV* = object 
    FirstArraySlice*: UINT
    ArraySize*: UINT



  D3D11_SHADER_RESOURCE_VIEW_DESC_UNION* {.union.} = object
    Buffer*: D3D11_BUFFER_SRV
    Texture1D*: D3D11_TEX1D_SRV
    Texture1DArray*: D3D11_TEX1D_ARRAY_SRV
    Texture2D*: D3D11_TEX2D_SRV
    Texture2DArray*: D3D11_TEX2D_ARRAY_SRV
    Texture2DMS*: D3D11_TEX2DMS_SRV
    Texture2DMSArray*: D3D11_TEX2DMS_ARRAY_SRV
    Texture3D*: D3D11_TEX3D_SRV
    TextureCube*: D3D11_TEXCUBE_SRV
    TextureCubeArray*: D3D11_TEXCUBE_ARRAY_SRV
    BufferEx*: D3D11_BUFFEREX_SRV
  D3D11_SHADER_RESOURCE_VIEW_DESC* = object
    Format*: DXGI_FORMAT
    ViewDimension*: D3D11_SRV_DIMENSION
    ViewUnion*: D3D11_SHADER_RESOURCE_VIEW_DESC_UNION

  ID3D11ShaderResourceViewVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11ShaderResourceView; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11ShaderResourceView): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11ShaderResourceView): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11ShaderResourceView; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11ShaderResourceView; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11ShaderResourceView; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11ShaderResourceView; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetResource*: proc (This: ptr ID3D11ShaderResourceView; 
                        ppResource: ptr ptr ID3D11Resource) {.stdcall.} # 
                                                                        # [annotation] 
    GetDesc*: proc (This: ptr ID3D11ShaderResourceView; 
                    pDesc: ptr D3D11_SHADER_RESOURCE_VIEW_DESC) {.stdcall.} # 
                                                                            # [annotation] 
  
  ID3D11ShaderResourceView* = object 
    lpVtbl*: ptr ID3D11ShaderResourceViewVtbl



  D3D11_BUFFER_RTV_FIRST* {.union.} = object
    FirstElement*: UINT
    ElementOffset*: UINT
  D3D11_BUFFER_RTV_NUM* {.union.} = object
    NumElements*: UINT
    ElementWidth*: UINT
  D3D11_BUFFER_RTV* = object
    First*: D3D11_BUFFER_RTV_FIRST
    Num*: D3D11_BUFFER_RTV_NUM
  D3D11_TEX1D_RTV* = object 
    MipSlice*: UINT

  D3D11_TEX1D_ARRAY_RTV* = object 
    MipSlice*: UINT
    FirstArraySlice*: UINT
    ArraySize*: UINT

  D3D11_TEX2D_RTV* = object 
    MipSlice*: UINT

  D3D11_TEX2DMS_RTV* = object 
    UnusedField_NothingToDefine*: UINT

  D3D11_TEX2D_ARRAY_RTV* = object 
    MipSlice*: UINT
    FirstArraySlice*: UINT
    ArraySize*: UINT

  D3D11_TEX2DMS_ARRAY_RTV* = object 
    FirstArraySlice*: UINT
    ArraySize*: UINT

  D3D11_TEX3D_RTV* = object 
    MipSlice*: UINT
    FirstWSlice*: UINT
    WSize*: UINT


  D3D11_RENDER_TARGET_VIEW_DESC_UNION* {.union.} = object
    Buffer*: D3D11_BUFFER_RTV
    Texture1D*: D3D11_TEX1D_RTV
    Texture1DArray*: D3D11_TEX1D_ARRAY_RTV
    Texture2D*: D3D11_TEX2D_RTV
    Texture2DArray*: D3D11_TEX2D_ARRAY_RTV
    Texture2DMS*: D3D11_TEX2DMS_RTV
    Texture2DMSArray*: D3D11_TEX2DMS_ARRAY_RTV
    Texture3D*: D3D11_TEX3D_RTV
  D3D11_RENDER_TARGET_VIEW_DESC* = object
    Format*: DXGI_FORMAT
    ViewDimension*: D3D11_RTV_DIMENSION
    Union*: D3D11_RENDER_TARGET_VIEW_DESC_UNION



  ID3D11RenderTargetViewVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11RenderTargetView; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11RenderTargetView): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11RenderTargetView): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11RenderTargetView; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11RenderTargetView; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11RenderTargetView; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11RenderTargetView; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetResource*: proc (This: ptr ID3D11RenderTargetView; 
                        ppResource: ptr ptr ID3D11Resource) {.stdcall.} # 
                                                                        # [annotation] 
    GetDesc*: proc (This: ptr ID3D11RenderTargetView; 
                    pDesc: ptr D3D11_RENDER_TARGET_VIEW_DESC) {.stdcall.} # 
                                                                          # [annotation] 
  
  ID3D11RenderTargetView* = object 
    lpVtbl*: ptr ID3D11RenderTargetViewVtbl



  D3D11_TEX1D_DSV* = object 
    MipSlice*: UINT

  D3D11_TEX1D_ARRAY_DSV* = object 
    MipSlice*: UINT
    FirstArraySlice*: UINT
    ArraySize*: UINT

  D3D11_TEX2D_DSV* = object 
    MipSlice*: UINT

  D3D11_TEX2D_ARRAY_DSV* = object 
    MipSlice*: UINT
    FirstArraySlice*: UINT
    ArraySize*: UINT

  D3D11_TEX2DMS_DSV* = object 
    UnusedField_NothingToDefine*: UINT

  D3D11_TEX2DMS_ARRAY_DSV* = object 
    FirstArraySlice*: UINT
    ArraySize*: UINT

  D3D11_DSV_FLAG* {.size: sizeof(cint).} = enum 
    D3D11_DSV_READ_ONLY_DEPTH = 0x00000001, 
    D3D11_DSV_READ_ONLY_STENCIL = 0x00000002

  D3D11_DEPTH_STENCIL_VIEW_DESC_UNION* {.union.} = object
    Texture1D*: D3D11_TEX1D_DSV
    Texture1DArray*: D3D11_TEX1D_ARRAY_DSV
    Texture2D*: D3D11_TEX2D_DSV
    Texture2DArray*: D3D11_TEX2D_ARRAY_DSV
    Texture2DMS*: D3D11_TEX2DMS_DSV
    Texture2DMSArray*: D3D11_TEX2DMS_ARRAY_DSV
  D3D11_DEPTH_STENCIL_VIEW_DESC* = object
    Format*: DXGI_FORMAT
    ViewDimension*: D3D11_DSV_DIMENSION
    Union*: D3D11_DEPTH_STENCIL_VIEW_DESC_UNION


  ID3D11DepthStencilViewVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11DepthStencilView; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11DepthStencilView): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11DepthStencilView): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11DepthStencilView; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11DepthStencilView; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11DepthStencilView; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11DepthStencilView; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetResource*: proc (This: ptr ID3D11DepthStencilView; 
                        ppResource: ptr ptr ID3D11Resource) {.stdcall.} # 
                                                                        # [annotation] 
    GetDesc*: proc (This: ptr ID3D11DepthStencilView; 
                    pDesc: ptr D3D11_DEPTH_STENCIL_VIEW_DESC) {.stdcall.} # 
                                                                          # [annotation] 
  
  ID3D11DepthStencilView* = object 
    lpVtbl*: ptr ID3D11DepthStencilViewVtbl



  D3D11_BUFFER_UAV_FLAG* {.size: sizeof(cint).} = enum 
    D3D11_BUFFER_UAV_FLAG_RAW = 0x00000001, 
    D3D11_BUFFER_UAV_FLAG_APPEND = 0x00000002, 
    D3D11_BUFFER_UAV_FLAG_COUNTER = 0x00000004
  D3D11_BUFFER_UAV* = object 
    FirstElement*: UINT
    NumElements*: UINT
    Flags*: UINT

  D3D11_TEX1D_UAV* = object 
    MipSlice*: UINT

  D3D11_TEX1D_ARRAY_UAV* = object 
    MipSlice*: UINT
    FirstArraySlice*: UINT
    ArraySize*: UINT

  D3D11_TEX2D_UAV* = object 
    MipSlice*: UINT

  D3D11_TEX2D_ARRAY_UAV* = object 
    MipSlice*: UINT
    FirstArraySlice*: UINT
    ArraySize*: UINT

  D3D11_TEX3D_UAV* = object 
    MipSlice*: UINT
    FirstWSlice*: UINT
    WSize*: UINT



  D3D11_UNORDERED_ACCESS_VIEW_DESC_UNION* {.union.} = object
    Buffer*: D3D11_BUFFER_UAV
    Texture1D*: D3D11_TEX1D_UAV
    Texture1DArray*: D3D11_TEX1D_ARRAY_UAV
    Texture2D*: D3D11_TEX2D_UAV
    Texture2DArray*: D3D11_TEX2D_ARRAY_UAV
    Texture3D*: D3D11_TEX3D_UAV
  D3D11_UNORDERED_ACCESS_VIEW_DESC* = object
    Format*: DXGI_FORMAT
    ViewDimension*: D3D11_UAV_DIMENSION
    Union*: D3D11_UNORDERED_ACCESS_VIEW_DESC_UNION


  ID3D11UnorderedAccessViewVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11UnorderedAccessView; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11UnorderedAccessView): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11UnorderedAccessView): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11UnorderedAccessView; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11UnorderedAccessView; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11UnorderedAccessView; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11UnorderedAccessView; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetResource*: proc (This: ptr ID3D11UnorderedAccessView; 
                        ppResource: ptr ptr ID3D11Resource) {.stdcall.} # 
                                                                        # [annotation] 
    GetDesc*: proc (This: ptr ID3D11UnorderedAccessView; 
                    pDesc: ptr D3D11_UNORDERED_ACCESS_VIEW_DESC) {.stdcall.} # 
                                                                             # [annotation] 
  
  ID3D11UnorderedAccessView* = object 
    lpVtbl*: ptr ID3D11UnorderedAccessViewVtbl



  ID3D11VertexShaderVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11VertexShader; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11VertexShader): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11VertexShader): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11VertexShader; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11VertexShader; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11VertexShader; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11VertexShader; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
  
  ID3D11VertexShader* = object 
    lpVtbl*: ptr ID3D11VertexShaderVtbl



  ID3D11HullShaderVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11HullShader; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11HullShader): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11HullShader): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11HullShader; ppDevice: ptr ptr ID3D11Device) {.
        stdcall.}             # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11HullShader; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11HullShader; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11HullShader; guid: ptr GUID; 
                                    pData: ptr IUnknown): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
  
  ID3D11HullShader* = object 
    lpVtbl*: ptr ID3D11HullShaderVtbl



  ID3D11DomainShaderVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11DomainShader; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11DomainShader): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11DomainShader): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11DomainShader; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11DomainShader; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11DomainShader; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11DomainShader; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
  
  ID3D11DomainShader* = object 
    lpVtbl*: ptr ID3D11DomainShaderVtbl



  ID3D11GeometryShaderVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11GeometryShader; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11GeometryShader): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11GeometryShader): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11GeometryShader; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11GeometryShader; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11GeometryShader; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11GeometryShader; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
  
  ID3D11GeometryShader* = object 
    lpVtbl*: ptr ID3D11GeometryShaderVtbl



  ID3D11PixelShaderVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11PixelShader; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11PixelShader): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11PixelShader): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11PixelShader; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11PixelShader; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11PixelShader; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11PixelShader; guid: ptr GUID; 
                                    pData: ptr IUnknown): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
  
  ID3D11PixelShader* = object 
    lpVtbl*: ptr ID3D11PixelShaderVtbl



  ID3D11ComputeShaderVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11ComputeShader; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11ComputeShader): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11ComputeShader): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11ComputeShader; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11ComputeShader; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11ComputeShader; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11ComputeShader; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
  
  ID3D11ComputeShader* = object 
    lpVtbl*: ptr ID3D11ComputeShaderVtbl



  ID3D11InputLayoutVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11InputLayout; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11InputLayout): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11InputLayout): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11InputLayout; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11InputLayout; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11InputLayout; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11InputLayout; guid: ptr GUID; 
                                    pData: ptr IUnknown): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
  
  ID3D11InputLayout* = object 
    lpVtbl*: ptr ID3D11InputLayoutVtbl




  D3D11_SAMPLER_DESC* = object 
    Filter*: D3D11_FILTER
    AddressU*: D3D11_TEXTURE_ADDRESS_MODE
    AddressV*: D3D11_TEXTURE_ADDRESS_MODE
    AddressW*: D3D11_TEXTURE_ADDRESS_MODE
    MipLODBias*: FLOAT
    MaxAnisotropy*: UINT
    ComparisonFunc*: D3D11_COMPARISON_FUNC
    BorderColor*: array[4, FLOAT]
    MinLOD*: FLOAT
    MaxLOD*: FLOAT



  ID3D11SamplerStateVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11SamplerState; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11SamplerState): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11SamplerState): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11SamplerState; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11SamplerState; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11SamplerState; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11SamplerState; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetDesc*: proc (This: ptr ID3D11SamplerState; pDesc: ptr D3D11_SAMPLER_DESC) {.
        stdcall.}             # [annotation] 
  
  ID3D11SamplerState* = object 
    lpVtbl*: ptr ID3D11SamplerStateVtbl





  ID3D11AsynchronousVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11Asynchronous; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11Asynchronous): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11Asynchronous): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11Asynchronous; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11Asynchronous; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11Asynchronous; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11Asynchronous; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetDataSize*: proc (This: ptr ID3D11Asynchronous): UINT {.stdcall.}

  ID3D11Asynchronous* = object 
    lpVtbl*: ptr ID3D11AsynchronousVtbl



  D3D11_QUERY_DESC* = object 
    Query*: D3D11_QUERY
    MiscFlags*: UINT



  ID3D11QueryVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11Query; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11Query): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11Query): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11Query; ppDevice: ptr ptr ID3D11Device) {.
        stdcall.}             # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11Query; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11Query; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11Query; guid: ptr GUID; 
                                    pData: ptr IUnknown): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    GetDataSize*: proc (This: ptr ID3D11Query): UINT {.stdcall.}
    GetDesc*: proc (This: ptr ID3D11Query; pDesc: ptr D3D11_QUERY_DESC) {.
        stdcall.}             # [annotation] 
  
  ID3D11Query* = object 
    lpVtbl*: ptr ID3D11QueryVtbl



  ID3D11PredicateVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11Predicate; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11Predicate): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11Predicate): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11Predicate; ppDevice: ptr ptr ID3D11Device) {.
        stdcall.}             # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11Predicate; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11Predicate; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11Predicate; guid: ptr GUID; 
                                    pData: ptr IUnknown): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    GetDataSize*: proc (This: ptr ID3D11Predicate): UINT {.stdcall.}
    GetDesc*: proc (This: ptr ID3D11Predicate; pDesc: ptr D3D11_QUERY_DESC) {.
        stdcall.}             # [annotation] 
  
  ID3D11Predicate* = object 
    lpVtbl*: ptr ID3D11PredicateVtbl



  D3D11_QUERY_DATA_TIMESTAMP_DISJOINT* = object 
    Frequency*: UINT64
    Disjoint*: BOOL

  D3D11_QUERY_DATA_PIPELINE_STATISTICS* = object 
    IAVertices*: UINT64
    IAPrimitives*: UINT64
    VSInvocations*: UINT64
    GSInvocations*: UINT64
    GSPrimitives*: UINT64
    CInvocations*: UINT64
    CPrimitives*: UINT64
    PSInvocations*: UINT64
    HSInvocations*: UINT64
    DSInvocations*: UINT64
    CSInvocations*: UINT64

  D3D11_QUERY_DATA_SO_STATISTICS* = object 
    NumPrimitivesWritten*: UINT64
    PrimitivesStorageNeeded*: UINT64

  D3D11_COUNTER_DESC* = object 
    Counter*: D3D11_COUNTER
    MiscFlags*: UINT

  D3D11_COUNTER_INFO* = object 
    LastDeviceDependentCounter*: D3D11_COUNTER
    NumSimultaneousCounters*: UINT
    NumDetectableParallelUnits*: UINT8



  ID3D11CounterVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11Counter; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11Counter): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11Counter): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11Counter; ppDevice: ptr ptr ID3D11Device) {.
        stdcall.}             # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11Counter; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11Counter; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11Counter; guid: ptr GUID; 
                                    pData: ptr IUnknown): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    GetDataSize*: proc (This: ptr ID3D11Counter): UINT {.stdcall.}
    GetDesc*: proc (This: ptr ID3D11Counter; pDesc: ptr D3D11_COUNTER_DESC) {.
        stdcall.}             # [annotation] 
  
  ID3D11Counter* = object 
    lpVtbl*: ptr ID3D11CounterVtbl



  D3D11_CLASS_INSTANCE_DESC* = object 
    InstanceId*: UINT
    InstanceIndex*: UINT
    TypeId*: UINT
    ConstantBuffer*: UINT
    BaseConstantBufferOffset*: UINT
    BaseTexture*: UINT
    BaseSampler*: UINT
    Created*: BOOL



  ID3D11ClassInstanceVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11ClassInstance; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11ClassInstance): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11ClassInstance): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11ClassInstance; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11ClassInstance; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11ClassInstance; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11ClassInstance; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetClassLinkage*: proc (This: ptr ID3D11ClassInstance; 
                            ppLinkage: ptr ptr ID3D11ClassLinkage) {.stdcall.} # 
                                                                               # [annotation] 
    GetDesc*: proc (This: ptr ID3D11ClassInstance; 
                    pDesc: ptr D3D11_CLASS_INSTANCE_DESC) {.stdcall.} # 
                                                                      # [annotation] 
    GetInstanceName*: proc (This: ptr ID3D11ClassInstance; pInstanceName: LPSTR; 
                            pBufferLength: ptr SIZE_T) {.stdcall.} # [annotation] 
                                                                   # [annotation] 
    GetTypeName*: proc (This: ptr ID3D11ClassInstance; pTypeName: LPSTR; 
                        pBufferLength: ptr SIZE_T) {.stdcall.} # [annotation] 
                                                               # [annotation] 
  
  ID3D11ClassInstance* = object 
    lpVtbl*: ptr ID3D11ClassInstanceVtbl



  ID3D11ClassLinkageVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11ClassLinkage; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11ClassLinkage): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11ClassLinkage): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11ClassLinkage; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11ClassLinkage; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11ClassLinkage; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11ClassLinkage; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetClassInstance*: proc (This: ptr ID3D11ClassLinkage; 
                             pClassInstanceName: LPCSTR; InstanceIndex: UINT; 
                             ppInstance: ptr ptr ID3D11ClassInstance): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CreateClassInstance*: proc (This: ptr ID3D11ClassLinkage; 
                                pClassTypeName: LPCSTR; 
                                ConstantBufferOffset: UINT; 
                                ConstantVectorOffset: UINT; TextureOffset: UINT; 
                                SamplerOffset: UINT; 
                                ppInstance: ptr ptr ID3D11ClassInstance): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
  
  ID3D11ClassLinkage* = object 
    lpVtbl*: ptr ID3D11ClassLinkageVtbl



  ID3D11CommandListVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11CommandList; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11CommandList): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11CommandList): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11CommandList; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11CommandList; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11CommandList; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11CommandList; guid: ptr GUID; 
                                    pData: ptr IUnknown): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    GetContextFlags*: proc (This: ptr ID3D11CommandList): UINT {.stdcall.}

  ID3D11CommandList* = object 
    lpVtbl*: ptr ID3D11CommandListVtbl



  D3D11_FEATURE_DATA_THREADING* = object 
    DriverConcurrentCreates*: BOOL
    DriverCommandLists*: BOOL

  D3D11_FEATURE_DATA_DOUBLES* = object 
    DoublePrecisionFloatShaderOps*: BOOL

  D3D11_FEATURE_DATA_FORMAT_SUPPORT* = object 
    InFormat*: DXGI_FORMAT
    OutFormatSupport*: UINT

  D3D11_FEATURE_DATA_FORMAT_SUPPORT2* = object 
    InFormat*: DXGI_FORMAT
    OutFormatSupport2*: UINT

  D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS* = object 
    ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x*: BOOL



  D3D11_FEATURE_DATA_D3D11_OPTIONS* = object 
    OutputMergerLogicOp*: BOOL
    UAVOnlyRenderingForcedSampleCount*: BOOL
    DiscardAPIsSeenByDriver*: BOOL
    FlagsForUpdateAndCopySeenByDriver*: BOOL
    ClearView*: BOOL
    CopyWithOverlap*: BOOL
    ConstantBufferPartialUpdate*: BOOL
    ConstantBufferOffsetting*: BOOL
    MapNoOverwriteOnDynamicConstantBuffer*: BOOL
    MapNoOverwriteOnDynamicBufferSRV*: BOOL
    MultisampleRTVWithForcedSampleCountOne*: BOOL
    SAD4ShaderInstructions*: BOOL
    ExtendedDoublesShaderInstructions*: BOOL
    ExtendedResourceSharing*: BOOL

  D3D11_FEATURE_DATA_ARCHITECTURE_INFO* = object 
    TileBasedDeferredRenderer*: BOOL

  D3D11_FEATURE_DATA_D3D9_OPTIONS* = object 
    FullNonPow2TextureSupport*: BOOL

  D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT* = object 
    SupportsDepthAsTextureWithLessEqualComparisonFilter*: BOOL

  D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT* = object 
    PixelShaderMinPrecision*: UINT
    AllOtherShaderStagesMinPrecision*: UINT

  D3D11_FEATURE_DATA_D3D11_OPTIONS1* = object 
    TiledResourcesTier*: D3D11_TILED_RESOURCES_TIER
    MinMaxFiltering*: BOOL
    ClearViewAlsoSupportsDepthOnlyFormats*: BOOL
    MapOnDefaultBuffers*: BOOL

  D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT* = object 
    SimpleInstancingSupported*: BOOL

  D3D11_FEATURE_DATA_MARKER_SUPPORT* = object 
    Profile*: BOOL

  D3D11_FEATURE_DATA_D3D9_OPTIONS1* = object 
    FullNonPow2TextureSupported*: BOOL
    DepthAsTextureWithLessEqualComparisonFilterSupported*: BOOL
    SimpleInstancingSupported*: BOOL
    TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported*: BOOL



  ID3D11DeviceContextVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11DeviceContext; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11DeviceContext): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11DeviceContext): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11DeviceContext; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11DeviceContext; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11DeviceContext; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11DeviceContext; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    VSSetConstantBuffers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumBuffers: UINT; 
                                 ppConstantBuffers: ptr ptr ID3D11Buffer) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    PSSetShaderResources*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumViews: UINT; ppShaderResourceViews: ptr ptr ID3D11ShaderResourceView) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    PSSetShader*: proc (This: ptr ID3D11DeviceContext; 
                        pPixelShader: ptr ID3D11PixelShader; 
                        ppClassInstances: ptr ptr ID3D11ClassInstance; 
                        NumClassInstances: UINT) {.stdcall.} # [annotation] 
                                                             # [annotation] 
    PSSetSamplers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                          NumSamplers: UINT; 
                          ppSamplers: ptr ptr ID3D11SamplerState) {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    VSSetShader*: proc (This: ptr ID3D11DeviceContext; 
                        pVertexShader: ptr ID3D11VertexShader; 
                        ppClassInstances: ptr ptr ID3D11ClassInstance; 
                        NumClassInstances: UINT) {.stdcall.} # [annotation] 
                                                             # [annotation] 
    DrawIndexed*: proc (This: ptr ID3D11DeviceContext; IndexCount: UINT; 
                        StartIndexLocation: UINT; BaseVertexLocation: INT) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    Draw*: proc (This: ptr ID3D11DeviceContext; VertexCount: UINT; 
                 StartVertexLocation: UINT) {.stdcall.} # [annotation] 
                                                        # [annotation] 
    Map*: proc (This: ptr ID3D11DeviceContext; pResource: ptr ID3D11Resource; 
                Subresource: UINT; MapType: D3D11_MAP; MapFlags: UINT; 
                pMappedResource: ptr D3D11_MAPPED_SUBRESOURCE): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    Unmap*: proc (This: ptr ID3D11DeviceContext; pResource: ptr ID3D11Resource; 
                  Subresource: UINT) {.stdcall.} # [annotation] 
                                                 # [annotation] 
    PSSetConstantBuffers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumBuffers: UINT; 
                                 ppConstantBuffers: ptr ptr ID3D11Buffer) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    IASetInputLayout*: proc (This: ptr ID3D11DeviceContext; 
                             pInputLayout: ptr ID3D11InputLayout) {.stdcall.} # 
                                                                              # [annotation] 
    IASetVertexBuffers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                               NumBuffers: UINT; 
                               ppVertexBuffers: ptr ptr ID3D11Buffer; 
                               pStrides: ptr UINT; pOffsets: ptr UINT) {.stdcall.} # 
                                                                                   # [annotation] 
                                                                                   # 
                                                                                   # [annotation] 
                                                                                   # 
                                                                                   # [annotation] 
                                                                                   # 
                                                                                   # [annotation] 
                                                                                   # 
                                                                                   # [annotation] 
    IASetIndexBuffer*: proc (This: ptr ID3D11DeviceContext; 
                             pIndexBuffer: ptr ID3D11Buffer; 
                             Format: DXGI_FORMAT; Offset: UINT) {.stdcall.} # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
    DrawIndexedInstanced*: proc (This: ptr ID3D11DeviceContext; 
                                 IndexCountPerInstance: UINT; 
                                 InstanceCount: UINT; StartIndexLocation: UINT; 
                                 BaseVertexLocation: INT; 
                                 StartInstanceLocation: UINT) {.stdcall.} # 
                                                                          # [annotation] 
                                                                          # 
                                                                          # [annotation] 
                                                                          # 
                                                                          # [annotation] 
                                                                          # 
                                                                          # [annotation] 
                                                                          # 
                                                                          # [annotation] 
    DrawInstanced*: proc (This: ptr ID3D11DeviceContext; 
                          VertexCountPerInstance: UINT; InstanceCount: UINT; 
                          StartVertexLocation: UINT; StartInstanceLocation: UINT) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    GSSetConstantBuffers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumBuffers: UINT; 
                                 ppConstantBuffers: ptr ptr ID3D11Buffer) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    GSSetShader*: proc (This: ptr ID3D11DeviceContext; 
                        pShader: ptr ID3D11GeometryShader; 
                        ppClassInstances: ptr ptr ID3D11ClassInstance; 
                        NumClassInstances: UINT) {.stdcall.} # [annotation] 
                                                             # [annotation] 
    IASetPrimitiveTopology*: proc (This: ptr ID3D11DeviceContext; 
                                   Topology: D3D11_PRIMITIVE_TOPOLOGY) {.stdcall.} # 
                                                                                   # [annotation] 
    VSSetShaderResources*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumViews: UINT; ppShaderResourceViews: ptr ptr ID3D11ShaderResourceView) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    VSSetSamplers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                          NumSamplers: UINT; 
                          ppSamplers: ptr ptr ID3D11SamplerState) {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    Begin*: proc (This: ptr ID3D11DeviceContext; pAsync: ptr ID3D11Asynchronous) {.
        stdcall.}             # [annotation] 
    `End`*: proc (This: ptr ID3D11DeviceContext; pAsync: ptr ID3D11Asynchronous) {.
        stdcall.}             # [annotation] 
    GetData*: proc (This: ptr ID3D11DeviceContext; 
                    pAsync: ptr ID3D11Asynchronous; pData: pointer; 
                    DataSize: UINT; GetDataFlags: UINT): HRESULT {.stdcall.} # 
                                                                             # [annotation] 
                                                                             # 
                                                                             # [annotation] 
                                                                             # 
                                                                             # [annotation] 
                                                                             # 
                                                                             # [annotation] 
    SetPredication*: proc (This: ptr ID3D11DeviceContext; 
                           pPredicate: ptr ID3D11Predicate; PredicateValue: BOOL) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GSSetShaderResources*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumViews: UINT; ppShaderResourceViews: ptr ptr ID3D11ShaderResourceView) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    GSSetSamplers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                          NumSamplers: UINT; 
                          ppSamplers: ptr ptr ID3D11SamplerState) {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    OMSetRenderTargets*: proc (This: ptr ID3D11DeviceContext; NumViews: UINT; 
        ppRenderTargetViews: ptr ptr ID3D11RenderTargetView; 
                               pDepthStencilView: ptr ID3D11DepthStencilView) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    OMSetRenderTargetsAndUnorderedAccessViews*: proc (
        This: ptr ID3D11DeviceContext; NumRTVs: UINT; 
        ppRenderTargetViews: ptr ptr ID3D11RenderTargetView; 
        pDepthStencilView: ptr ID3D11DepthStencilView; UAVStartSlot: UINT; 
        NumUAVs: UINT; 
        ppUnorderedAccessViews: ptr ptr ID3D11UnorderedAccessView; 
        pUAVInitialCounts: ptr UINT) {.stdcall.} # [annotation] 
                                                 # [annotation] 
                                                 # [annotation] 
                                                 # [annotation] 
                                                 # [annotation] 
                                                 # [annotation] 
                                                 # [annotation] 
    OMSetBlendState*: proc (This: ptr ID3D11DeviceContext; 
                            pBlendState: ptr ID3D11BlendState; 
                            BlendFactor: array[4, FLOAT]; SampleMask: UINT) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    OMSetDepthStencilState*: proc (This: ptr ID3D11DeviceContext; 
        pDepthStencilState: ptr ID3D11DepthStencilState; StencilRef: UINT) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    SOSetTargets*: proc (This: ptr ID3D11DeviceContext; NumBuffers: UINT; 
                         ppSOTargets: ptr ptr ID3D11Buffer; pOffsets: ptr UINT) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    DrawAuto*: proc (This: ptr ID3D11DeviceContext) {.stdcall.}
    DrawIndexedInstancedIndirect*: proc (This: ptr ID3D11DeviceContext; 
        pBufferForArgs: ptr ID3D11Buffer; AlignedByteOffsetForArgs: UINT) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    DrawInstancedIndirect*: proc (This: ptr ID3D11DeviceContext; 
                                  pBufferForArgs: ptr ID3D11Buffer; 
                                  AlignedByteOffsetForArgs: UINT) {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    Dispatch*: proc (This: ptr ID3D11DeviceContext; ThreadGroupCountX: UINT; 
                     ThreadGroupCountY: UINT; ThreadGroupCountZ: UINT) {.stdcall.} # 
                                                                                   # [annotation] 
                                                                                   # 
                                                                                   # [annotation] 
                                                                                   # 
                                                                                   # [annotation] 
    DispatchIndirect*: proc (This: ptr ID3D11DeviceContext; 
                             pBufferForArgs: ptr ID3D11Buffer; 
                             AlignedByteOffsetForArgs: UINT) {.stdcall.} # 
                                                                         # [annotation] 
                                                                         # 
                                                                         # [annotation] 
    RSSetState*: proc (This: ptr ID3D11DeviceContext; 
                       pRasterizerState: ptr ID3D11RasterizerState) {.stdcall.} # 
                                                                                # [annotation] 
    RSSetViewports*: proc (This: ptr ID3D11DeviceContext; NumViewports: UINT; 
                           pViewports: ptr D3D11_VIEWPORT) {.stdcall.} # 
                                                                       # [annotation] 
                                                                       # 
                                                                       # [annotation] 
    RSSetScissorRects*: proc (This: ptr ID3D11DeviceContext; NumRects: UINT; 
                              pRects: ptr D3D11_RECT) {.stdcall.} # [annotation] 
                                                                  # [annotation] 
    CopySubresourceRegion*: proc (This: ptr ID3D11DeviceContext; 
                                  pDstResource: ptr ID3D11Resource; 
                                  DstSubresource: UINT; DstX: UINT; DstY: UINT; 
                                  DstZ: UINT; pSrcResource: ptr ID3D11Resource; 
                                  SrcSubresource: UINT; pSrcBox: ptr D3D11_BOX) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CopyResource*: proc (This: ptr ID3D11DeviceContext; 
                         pDstResource: ptr ID3D11Resource; 
                         pSrcResource: ptr ID3D11Resource) {.stdcall.} # 
                                                                       # [annotation] 
                                                                       # 
                                                                       # [annotation] 
    UpdateSubresource*: proc (This: ptr ID3D11DeviceContext; 
                              pDstResource: ptr ID3D11Resource; 
                              DstSubresource: UINT; pDstBox: ptr D3D11_BOX; 
                              pSrcData: pointer; SrcRowPitch: UINT; 
                              SrcDepthPitch: UINT) {.stdcall.} # [annotation] 
                                                               # [annotation] 
                                                               # [annotation] 
                                                               # [annotation] 
                                                               # [annotation] 
                                                               # [annotation] 
    CopyStructureCount*: proc (This: ptr ID3D11DeviceContext; 
                               pDstBuffer: ptr ID3D11Buffer; 
                               DstAlignedByteOffset: UINT; 
                               pSrcView: ptr ID3D11UnorderedAccessView) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    ClearRenderTargetView*: proc (This: ptr ID3D11DeviceContext; 
        pRenderTargetView: ptr ID3D11RenderTargetView; 
                                  ColorRGBA: array[4, FLOAT]) {.stdcall.} # 
                                                                          # [annotation] 
                                                                          # 
                                                                          # [annotation] 
    ClearUnorderedAccessViewUint*: proc (This: ptr ID3D11DeviceContext; 
        pUnorderedAccessView: ptr ID3D11UnorderedAccessView; 
        Values: array[4, UINT]) {.stdcall.} # [annotation] 
                                            # [annotation] 
    ClearUnorderedAccessViewFloat*: proc (This: ptr ID3D11DeviceContext; 
        pUnorderedAccessView: ptr ID3D11UnorderedAccessView; 
        Values: array[4, FLOAT]) {.stdcall.} # [annotation] 
                                             # [annotation] 
    ClearDepthStencilView*: proc (This: ptr ID3D11DeviceContext; 
        pDepthStencilView: ptr ID3D11DepthStencilView; ClearFlags: UINT; 
                                  Depth: FLOAT; Stencil: UINT8) {.stdcall.} # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
    GenerateMips*: proc (This: ptr ID3D11DeviceContext; 
                         pShaderResourceView: ptr ID3D11ShaderResourceView) {.
        stdcall.}             # [annotation] 
    SetResourceMinLOD*: proc (This: ptr ID3D11DeviceContext; 
                              pResource: ptr ID3D11Resource; MinLOD: FLOAT) {.
        stdcall.}             # [annotation] 
    GetResourceMinLOD*: proc (This: ptr ID3D11DeviceContext; 
                              pResource: ptr ID3D11Resource): FLOAT {.stdcall.} # 
                                                                                # [annotation] 
    ResolveSubresource*: proc (This: ptr ID3D11DeviceContext; 
                               pDstResource: ptr ID3D11Resource; 
                               DstSubresource: UINT; 
                               pSrcResource: ptr ID3D11Resource; 
                               SrcSubresource: UINT; Format: DXGI_FORMAT) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    ExecuteCommandList*: proc (This: ptr ID3D11DeviceContext; 
                               pCommandList: ptr ID3D11CommandList; 
                               RestoreContextState: BOOL) {.stdcall.} # 
                                                                      # [annotation] 
    HSSetShaderResources*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumViews: UINT; ppShaderResourceViews: ptr ptr ID3D11ShaderResourceView) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    HSSetShader*: proc (This: ptr ID3D11DeviceContext; 
                        pHullShader: ptr ID3D11HullShader; 
                        ppClassInstances: ptr ptr ID3D11ClassInstance; 
                        NumClassInstances: UINT) {.stdcall.} # [annotation] 
                                                             # [annotation] 
    HSSetSamplers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                          NumSamplers: UINT; 
                          ppSamplers: ptr ptr ID3D11SamplerState) {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    HSSetConstantBuffers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumBuffers: UINT; 
                                 ppConstantBuffers: ptr ptr ID3D11Buffer) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    DSSetShaderResources*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumViews: UINT; ppShaderResourceViews: ptr ptr ID3D11ShaderResourceView) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    DSSetShader*: proc (This: ptr ID3D11DeviceContext; 
                        pDomainShader: ptr ID3D11DomainShader; 
                        ppClassInstances: ptr ptr ID3D11ClassInstance; 
                        NumClassInstances: UINT) {.stdcall.} # [annotation] 
                                                             # [annotation] 
    DSSetSamplers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                          NumSamplers: UINT; 
                          ppSamplers: ptr ptr ID3D11SamplerState) {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    DSSetConstantBuffers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumBuffers: UINT; 
                                 ppConstantBuffers: ptr ptr ID3D11Buffer) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CSSetShaderResources*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumViews: UINT; ppShaderResourceViews: ptr ptr ID3D11ShaderResourceView) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CSSetUnorderedAccessViews*: proc (This: ptr ID3D11DeviceContext; 
                                      StartSlot: UINT; NumUAVs: UINT; 
        ppUnorderedAccessViews: ptr ptr ID3D11UnorderedAccessView; 
                                      pUAVInitialCounts: ptr UINT) {.stdcall.} # 
                                                                               # [annotation] 
                                                                               # 
                                                                               # [annotation] 
                                                                               # 
                                                                               # [annotation] 
                                                                               # 
                                                                               # [annotation] 
    CSSetShader*: proc (This: ptr ID3D11DeviceContext; 
                        pComputeShader: ptr ID3D11ComputeShader; 
                        ppClassInstances: ptr ptr ID3D11ClassInstance; 
                        NumClassInstances: UINT) {.stdcall.} # [annotation] 
                                                             # [annotation] 
    CSSetSamplers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                          NumSamplers: UINT; 
                          ppSamplers: ptr ptr ID3D11SamplerState) {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    CSSetConstantBuffers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumBuffers: UINT; 
                                 ppConstantBuffers: ptr ptr ID3D11Buffer) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    VSGetConstantBuffers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumBuffers: UINT; 
                                 ppConstantBuffers: ptr ptr ID3D11Buffer) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    PSGetShaderResources*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumViews: UINT; ppShaderResourceViews: ptr ptr ID3D11ShaderResourceView) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    PSGetShader*: proc (This: ptr ID3D11DeviceContext; 
                        ppPixelShader: ptr ptr ID3D11PixelShader; 
                        ppClassInstances: ptr ptr ID3D11ClassInstance; 
                        pNumClassInstances: ptr UINT) {.stdcall.} # [annotation] 
                                                                  # [annotation] 
                                                                  # [annotation] 
    PSGetSamplers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                          NumSamplers: UINT; 
                          ppSamplers: ptr ptr ID3D11SamplerState) {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    VSGetShader*: proc (This: ptr ID3D11DeviceContext; 
                        ppVertexShader: ptr ptr ID3D11VertexShader; 
                        ppClassInstances: ptr ptr ID3D11ClassInstance; 
                        pNumClassInstances: ptr UINT) {.stdcall.} # [annotation] 
                                                                  # [annotation] 
                                                                  # [annotation] 
    PSGetConstantBuffers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumBuffers: UINT; 
                                 ppConstantBuffers: ptr ptr ID3D11Buffer) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    IAGetInputLayout*: proc (This: ptr ID3D11DeviceContext; 
                             ppInputLayout: ptr ptr ID3D11InputLayout) {.stdcall.} # 
                                                                                   # [annotation] 
    IAGetVertexBuffers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                               NumBuffers: UINT; 
                               ppVertexBuffers: ptr ptr ID3D11Buffer; 
                               pStrides: ptr UINT; pOffsets: ptr UINT) {.stdcall.} # 
                                                                                   # [annotation] 
                                                                                   # 
                                                                                   # [annotation] 
                                                                                   # 
                                                                                   # [annotation] 
                                                                                   # 
                                                                                   # [annotation] 
                                                                                   # 
                                                                                   # [annotation] 
    IAGetIndexBuffer*: proc (This: ptr ID3D11DeviceContext; 
                             pIndexBuffer: ptr ptr ID3D11Buffer; 
                             Format: ptr DXGI_FORMAT; Offset: ptr UINT) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    GSGetConstantBuffers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumBuffers: UINT; 
                                 ppConstantBuffers: ptr ptr ID3D11Buffer) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    GSGetShader*: proc (This: ptr ID3D11DeviceContext; 
                        ppGeometryShader: ptr ptr ID3D11GeometryShader; 
                        ppClassInstances: ptr ptr ID3D11ClassInstance; 
                        pNumClassInstances: ptr UINT) {.stdcall.} # [annotation] 
                                                                  # [annotation] 
                                                                  # [annotation] 
    IAGetPrimitiveTopology*: proc (This: ptr ID3D11DeviceContext; 
                                   pTopology: ptr D3D11_PRIMITIVE_TOPOLOGY) {.
        stdcall.}             # [annotation] 
    VSGetShaderResources*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumViews: UINT; ppShaderResourceViews: ptr ptr ID3D11ShaderResourceView) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    VSGetSamplers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                          NumSamplers: UINT; 
                          ppSamplers: ptr ptr ID3D11SamplerState) {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    GetPredication*: proc (This: ptr ID3D11DeviceContext; 
                           ppPredicate: ptr ptr ID3D11Predicate; 
                           pPredicateValue: ptr BOOL) {.stdcall.} # [annotation] 
                                                                  # [annotation] 
    GSGetShaderResources*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumViews: UINT; ppShaderResourceViews: ptr ptr ID3D11ShaderResourceView) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    GSGetSamplers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                          NumSamplers: UINT; 
                          ppSamplers: ptr ptr ID3D11SamplerState) {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    OMGetRenderTargets*: proc (This: ptr ID3D11DeviceContext; NumViews: UINT; 
        ppRenderTargetViews: ptr ptr ID3D11RenderTargetView; ppDepthStencilView: ptr ptr ID3D11DepthStencilView) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    OMGetRenderTargetsAndUnorderedAccessViews*: proc (
        This: ptr ID3D11DeviceContext; NumRTVs: UINT; 
        ppRenderTargetViews: ptr ptr ID3D11RenderTargetView; 
        ppDepthStencilView: ptr ptr ID3D11DepthStencilView; UAVStartSlot: UINT; 
        NumUAVs: UINT; ppUnorderedAccessViews: ptr ptr ID3D11UnorderedAccessView) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    OMGetBlendState*: proc (This: ptr ID3D11DeviceContext; 
                            ppBlendState: ptr ptr ID3D11BlendState; 
                            BlendFactor: array[4, FLOAT]; pSampleMask: ptr UINT) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    OMGetDepthStencilState*: proc (This: ptr ID3D11DeviceContext; 
        ppDepthStencilState: ptr ptr ID3D11DepthStencilState; 
                                   pStencilRef: ptr UINT) {.stdcall.} # 
                                                                      # [annotation] 
                                                                      # 
                                                                      # [annotation] 
    SOGetTargets*: proc (This: ptr ID3D11DeviceContext; NumBuffers: UINT; 
                         ppSOTargets: ptr ptr ID3D11Buffer) {.stdcall.} # 
                                                                        # [annotation] 
                                                                        # 
                                                                        # [annotation] 
    RSGetState*: proc (This: ptr ID3D11DeviceContext; 
                       ppRasterizerState: ptr ptr ID3D11RasterizerState) {.
        stdcall.}             # [annotation] 
    RSGetViewports*: proc (This: ptr ID3D11DeviceContext; 
                           pNumViewports: ptr UINT; 
                           pViewports: ptr D3D11_VIEWPORT) {.stdcall.} # 
                                                                       # [annotation] 
                                                                       #_range(0, 
                                                                       #D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE )
                                                                       # 
                                                                       # [annotation] 
    RSGetScissorRects*: proc (This: ptr ID3D11DeviceContext; 
                              pNumRects: ptr UINT; pRects: ptr D3D11_RECT) {.
        stdcall.} # [annotation] 
                  #_range(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE )
                  # [annotation] 
    HSGetShaderResources*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumViews: UINT; ppShaderResourceViews: ptr ptr ID3D11ShaderResourceView) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    HSGetShader*: proc (This: ptr ID3D11DeviceContext; 
                        ppHullShader: ptr ptr ID3D11HullShader; 
                        ppClassInstances: ptr ptr ID3D11ClassInstance; 
                        pNumClassInstances: ptr UINT) {.stdcall.} # [annotation] 
                                                                  # [annotation] 
                                                                  # [annotation] 
    HSGetSamplers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                          NumSamplers: UINT; 
                          ppSamplers: ptr ptr ID3D11SamplerState) {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    HSGetConstantBuffers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumBuffers: UINT; 
                                 ppConstantBuffers: ptr ptr ID3D11Buffer) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    DSGetShaderResources*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumViews: UINT; ppShaderResourceViews: ptr ptr ID3D11ShaderResourceView) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    DSGetShader*: proc (This: ptr ID3D11DeviceContext; 
                        ppDomainShader: ptr ptr ID3D11DomainShader; 
                        ppClassInstances: ptr ptr ID3D11ClassInstance; 
                        pNumClassInstances: ptr UINT) {.stdcall.} # [annotation] 
                                                                  # [annotation] 
                                                                  # [annotation] 
    DSGetSamplers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                          NumSamplers: UINT; 
                          ppSamplers: ptr ptr ID3D11SamplerState) {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    DSGetConstantBuffers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumBuffers: UINT; 
                                 ppConstantBuffers: ptr ptr ID3D11Buffer) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CSGetShaderResources*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumViews: UINT; ppShaderResourceViews: ptr ptr ID3D11ShaderResourceView) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CSGetUnorderedAccessViews*: proc (This: ptr ID3D11DeviceContext; 
                                      StartSlot: UINT; NumUAVs: UINT; 
        ppUnorderedAccessViews: ptr ptr ID3D11UnorderedAccessView) {.stdcall.} # 
                                                                               # [annotation] 
                                                                               # 
                                                                               # [annotation] 
                                                                               # 
                                                                               # [annotation] 
    CSGetShader*: proc (This: ptr ID3D11DeviceContext; 
                        ppComputeShader: ptr ptr ID3D11ComputeShader; 
                        ppClassInstances: ptr ptr ID3D11ClassInstance; 
                        pNumClassInstances: ptr UINT) {.stdcall.} # [annotation] 
                                                                  # [annotation] 
                                                                  # [annotation] 
    CSGetSamplers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                          NumSamplers: UINT; 
                          ppSamplers: ptr ptr ID3D11SamplerState) {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    CSGetConstantBuffers*: proc (This: ptr ID3D11DeviceContext; StartSlot: UINT; 
                                 NumBuffers: UINT; 
                                 ppConstantBuffers: ptr ptr ID3D11Buffer) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    ClearState*: proc (This: ptr ID3D11DeviceContext) {.stdcall.}
    Flush*: proc (This: ptr ID3D11DeviceContext) {.stdcall.}
    GetType*: proc (This: ptr ID3D11DeviceContext): D3D11_DEVICE_CONTEXT_TYPE {.
        stdcall.}
    GetContextFlags*: proc (This: ptr ID3D11DeviceContext): UINT {.stdcall.}
    FinishCommandList*: proc (This: ptr ID3D11DeviceContext; 
                              RestoreDeferredContextState: BOOL; 
                              ppCommandList: ptr ptr ID3D11CommandList): HRESULT {.
        stdcall.}             # [annotation] 
  
  ID3D11DeviceContext* = object 
    lpVtbl*: ptr ID3D11DeviceContextVtbl



  APP_DEPRECATED_HRESULT* = HRESULT



  D3D11_VIDEO_DECODER_DESC* = object 
    Guid*: GUID
    SampleWidth*: UINT
    SampleHeight*: UINT
    OutputFormat*: DXGI_FORMAT

  D3D11_VIDEO_DECODER_CONFIG* = object 
    guidConfigBitstreamEncryption*: GUID
    guidConfigMBcontrolEncryption*: GUID
    guidConfigResidDiffEncryption*: GUID
    ConfigBitstreamRaw*: UINT
    ConfigMBcontrolRasterOrder*: UINT
    ConfigResidDiffHost*: UINT
    ConfigSpatialResid8*: UINT
    ConfigResid8Subtraction*: UINT
    ConfigSpatialHost8or9Clipping*: UINT
    ConfigSpatialResidInterleaved*: UINT
    ConfigIntraResidUnsigned*: UINT
    ConfigResidDiffAccelerator*: UINT
    ConfigHostInverseScan*: UINT
    ConfigSpecificIDCT*: UINT
    Config4GroupedCoefs*: UINT
    ConfigMinRenderTargetBuffCount*: USHORT
    ConfigDecoderSpecific*: USHORT

  D3D11_AES_CTR_IV* = object 
    IV*: UINT64
    Count*: UINT64

  D3D11_ENCRYPTED_BLOCK_INFO* = object 
    NumEncryptedBytesAtBeginning*: UINT
    NumBytesInSkipPattern*: UINT
    NumBytesInEncryptPattern*: UINT

  D3D11_VIDEO_DECODER_BUFFER_DESC* = object 
    BufferType*: D3D11_VIDEO_DECODER_BUFFER_TYPE
    BufferIndex*: UINT
    DataOffset*: UINT
    DataSize*: UINT
    FirstMBaddress*: UINT
    NumMBsInBuffer*: UINT
    Width*: UINT
    Height*: UINT
    Stride*: UINT
    ReservedBits*: UINT       # [annotation] 
    pIV*: pointer
    IVSize*: UINT
    PartialEncryption*: BOOL
    EncryptedBlockInfo*: D3D11_ENCRYPTED_BLOCK_INFO

  D3D11_VIDEO_DECODER_EXTENSION* = object 
    Function*: UINT           # [annotation] 
    pPrivateInputData*: pointer
    PrivateInputDataSize*: UINT # [annotation] 
    pPrivateOutputData*: pointer
    PrivateOutputDataSize*: UINT
    ResourceCount*: UINT      # [annotation] 
    ppResourceList*: ptr ptr ID3D11Resource



  ID3D11VideoDecoderVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11VideoDecoder; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11VideoDecoder): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11VideoDecoder): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11VideoDecoder; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11VideoDecoder; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11VideoDecoder; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11VideoDecoder; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetCreationParameters*: proc (This: ptr ID3D11VideoDecoder; 
                                  pVideoDesc: ptr D3D11_VIDEO_DECODER_DESC; 
                                  pConfig: ptr D3D11_VIDEO_DECODER_CONFIG): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetDriverHandle*: proc (This: ptr ID3D11VideoDecoder; 
                            pDriverHandle: ptr HANDLE): HRESULT {.stdcall.} # 
                                                                            # [annotation] 
  
  ID3D11VideoDecoder* = object 
    lpVtbl*: ptr ID3D11VideoDecoderVtbl



  D3D11_VIDEO_PROCESSOR_CAPS* = object 
    DeviceCaps*: UINT
    FeatureCaps*: UINT
    FilterCaps*: UINT
    InputFormatCaps*: UINT
    AutoStreamCaps*: UINT
    StereoCaps*: UINT
    RateConversionCapsCount*: UINT
    MaxInputStreams*: UINT
    MaxStreamStates*: UINT

  D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS* = object 
    PastFrames*: UINT
    FutureFrames*: UINT
    ProcessorCaps*: UINT
    ITelecineCaps*: UINT
    CustomRateCount*: UINT



  D3D11_VIDEO_CONTENT_PROTECTION_CAPS* = object 
    Caps*: UINT
    KeyExchangeTypeCount*: UINT
    BlockAlignmentSize*: UINT
    ProtectedMemorySize*: ULONGLONG

  D3D11_VIDEO_PROCESSOR_CUSTOM_RATE* = object 
    CustomRate*: DXGI_RATIONAL
    OutputFrames*: UINT
    InputInterlaced*: BOOL
    InputFramesOrFields*: UINT

  D3D11_VIDEO_PROCESSOR_FILTER_RANGE* = object 
    Minimum*: cint
    Maximum*: cint
    Default*: cint
    Multiplier*: cfloat

  D3D11_VIDEO_PROCESSOR_CONTENT_DESC* = object 
    InputFrameFormat*: D3D11_VIDEO_FRAME_FORMAT
    InputFrameRate*: DXGI_RATIONAL
    InputWidth*: UINT
    InputHeight*: UINT
    OutputFrameRate*: DXGI_RATIONAL
    OutputWidth*: UINT
    OutputHeight*: UINT
    Usage*: D3D11_VIDEO_USAGE



  ID3D11VideoProcessorEnumeratorVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11VideoProcessorEnumerator; 
                           riid: ptr IID; ppvObject: ptr pointer): HRESULT {.
        stdcall.}             # [in] 
                              # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11VideoProcessorEnumerator): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11VideoProcessorEnumerator): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11VideoProcessorEnumerator; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11VideoProcessorEnumerator; 
                           guid: ptr GUID; pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11VideoProcessorEnumerator; 
                           guid: ptr GUID; DataSize: UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11VideoProcessorEnumerator; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetVideoProcessorContentDesc*: proc (
        This: ptr ID3D11VideoProcessorEnumerator; 
        pContentDesc: ptr D3D11_VIDEO_PROCESSOR_CONTENT_DESC): HRESULT {.stdcall.} # 
                                                                                   # [annotation] 
    CheckVideoProcessorFormat*: proc (This: ptr ID3D11VideoProcessorEnumerator; 
                                      Format: DXGI_FORMAT; pFlags: ptr UINT): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetVideoProcessorCaps*: proc (This: ptr ID3D11VideoProcessorEnumerator; 
                                  pCaps: ptr D3D11_VIDEO_PROCESSOR_CAPS): HRESULT {.
        stdcall.}             # [annotation] 
    GetVideoProcessorRateConversionCaps*: proc (
        This: ptr ID3D11VideoProcessorEnumerator; TypeIndex: UINT; 
        pCaps: ptr D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetVideoProcessorCustomRate*: proc (This: ptr ID3D11VideoProcessorEnumerator; 
                                        TypeIndex: UINT; CustomRateIndex: UINT; 
        pRate: ptr D3D11_VIDEO_PROCESSOR_CUSTOM_RATE): HRESULT {.stdcall.} # 
                                                                           # [annotation] 
                                                                           # 
                                                                           # [annotation] 
                                                                           # 
                                                                           # [annotation] 
    GetVideoProcessorFilterRange*: proc (
        This: ptr ID3D11VideoProcessorEnumerator; 
        Filter: D3D11_VIDEO_PROCESSOR_FILTER; 
        pRange: ptr D3D11_VIDEO_PROCESSOR_FILTER_RANGE): HRESULT {.stdcall.} # 
                                                                             # [annotation] 
                                                                             # 
                                                                             # [annotation] 
  
  ID3D11VideoProcessorEnumerator* = object 
    lpVtbl*: ptr ID3D11VideoProcessorEnumeratorVtbl



  D3D11_VIDEO_COLOR_RGBA* = object 
    R*: cfloat
    G*: cfloat
    B*: cfloat
    A*: cfloat

  D3D11_VIDEO_COLOR_YCbCrA* = object 
    Y*: cfloat
    Cb*: cfloat
    Cr*: cfloat
    A*: cfloat


  D3D11_VIDEO_COLOR* {.union.} = object
    YCbCrA*: D3D11_VIDEO_COLOR_YCbCrA
    RGBA*: D3D11_VIDEO_COLOR_RGBA
  D3D11_VIDEO_PROCESSOR_COLOR_SPACE* = object
    Value*: uint32
  D3D11_VIDEO_PROCESSOR_STREAM* = object 
    Enable*: BOOL
    OutputIndex*: UINT
    InputFrameOrField*: UINT
    PastFrames*: UINT
    FutureFrames*: UINT       # [annotation] 
    ppPastSurfaces*: ptr ptr ID3D11VideoProcessorInputView
    pInputSurface*: ptr ID3D11VideoProcessorInputView # [annotation] 
    ppFutureSurfaces*: ptr ptr ID3D11VideoProcessorInputView # [annotation] 
    ppPastSurfacesRight*: ptr ptr ID3D11VideoProcessorInputView
    pInputSurfaceRight*: ptr ID3D11VideoProcessorInputView # [annotation] 
    ppFutureSurfacesRight*: ptr ptr ID3D11VideoProcessorInputView



  ID3D11VideoProcessorVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11VideoProcessor; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11VideoProcessor): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11VideoProcessor): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11VideoProcessor; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11VideoProcessor; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11VideoProcessor; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11VideoProcessor; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetContentDesc*: proc (This: ptr ID3D11VideoProcessor; 
                           pDesc: ptr D3D11_VIDEO_PROCESSOR_CONTENT_DESC) {.
        stdcall.}             # [annotation] 
    GetRateConversionCaps*: proc (This: ptr ID3D11VideoProcessor; pCaps: ptr D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS) {.
        stdcall.}             # [annotation] 
  
  ID3D11VideoProcessor* = object 
    lpVtbl*: ptr ID3D11VideoProcessorVtbl



  D3D11_OMAC* = object 
    Omac*: array[16, BYTE]



  ID3D11AuthenticatedChannelVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11AuthenticatedChannel; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11AuthenticatedChannel): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11AuthenticatedChannel): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11AuthenticatedChannel; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11AuthenticatedChannel; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11AuthenticatedChannel; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11AuthenticatedChannel; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetCertificateSize*: proc (This: ptr ID3D11AuthenticatedChannel; 
                               pCertificateSize: ptr UINT): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
    GetCertificate*: proc (This: ptr ID3D11AuthenticatedChannel; 
                           CertificateSize: UINT; pCertificate: ptr BYTE): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetChannelHandle*: proc (This: ptr ID3D11AuthenticatedChannel; 
                             pChannelHandle: ptr HANDLE) {.stdcall.} # 
                                                                     # [annotation] 
  
  ID3D11AuthenticatedChannel* = object 
    lpVtbl*: ptr ID3D11AuthenticatedChannelVtbl





  D3D11_AUTHENTICATED_QUERY_INPUT* = object 
    QueryType*: GUID
    hChannel*: HANDLE
    SequenceNumber*: UINT

  D3D11_AUTHENTICATED_QUERY_OUTPUT* = object 
    omac*: D3D11_OMAC
    QueryType*: GUID
    hChannel*: HANDLE
    SequenceNumber*: UINT
    ReturnCode*: HRESULT



  D3D11_AUTHENTICATED_PROTECTION_FLAGS* = object
    Value*: UINT
  D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT* = object 
    Output*: D3D11_AUTHENTICATED_QUERY_OUTPUT
    ProtectionFlags*: D3D11_AUTHENTICATED_PROTECTION_FLAGS

  D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT* = object 
    Output*: D3D11_AUTHENTICATED_QUERY_OUTPUT
    ChannelType*: D3D11_AUTHENTICATED_CHANNEL_TYPE

  D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT* = object 
    Output*: D3D11_AUTHENTICATED_QUERY_OUTPUT
    DeviceHandle*: HANDLE

  D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT* = object 
    Input*: D3D11_AUTHENTICATED_QUERY_INPUT
    DecoderHandle*: HANDLE

  D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT* = object 
    Output*: D3D11_AUTHENTICATED_QUERY_OUTPUT
    DecoderHandle*: HANDLE
    CryptoSessionHandle*: HANDLE
    DeviceHandle*: HANDLE

  D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT* = object 
    Output*: D3D11_AUTHENTICATED_QUERY_OUTPUT
    RestrictedSharedResourceProcessCount*: UINT

  D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT* = object 
    Input*: D3D11_AUTHENTICATED_QUERY_INPUT
    ProcessIndex*: UINT

  D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT* = object 
    Output*: D3D11_AUTHENTICATED_QUERY_OUTPUT
    ProcessIndex*: UINT
    ProcessIdentifier*: D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE
    ProcessHandle*: HANDLE

  D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT* = object 
    Output*: D3D11_AUTHENTICATED_QUERY_OUTPUT
    UnrestrictedProtectedSharedResourceCount*: UINT

  D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT* = object 
    Input*: D3D11_AUTHENTICATED_QUERY_INPUT
    DeviceHandle*: HANDLE
    CryptoSessionHandle*: HANDLE

  D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT* = object 
    Output*: D3D11_AUTHENTICATED_QUERY_OUTPUT
    DeviceHandle*: HANDLE
    CryptoSessionHandle*: HANDLE
    OutputIDCount*: UINT

  D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT* = object 
    Input*: D3D11_AUTHENTICATED_QUERY_INPUT
    DeviceHandle*: HANDLE
    CryptoSessionHandle*: HANDLE
    OutputIDIndex*: UINT

  D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT* = object 
    Output*: D3D11_AUTHENTICATED_QUERY_OUTPUT
    DeviceHandle*: HANDLE
    CryptoSessionHandle*: HANDLE
    OutputIDIndex*: UINT
    OutputID*: UINT64

  D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT* = object 
    Output*: D3D11_AUTHENTICATED_QUERY_OUTPUT
    BusType*: D3D11_BUS_TYPE
    AccessibleInContiguousBlocks*: BOOL
    AccessibleInNonContiguousBlocks*: BOOL

  D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT* = object 
    Output*: D3D11_AUTHENTICATED_QUERY_OUTPUT
    EncryptionGuidCount*: UINT

  D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT* = object 
    Input*: D3D11_AUTHENTICATED_QUERY_INPUT
    EncryptionGuidIndex*: UINT

  D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT* = object 
    Output*: D3D11_AUTHENTICATED_QUERY_OUTPUT
    EncryptionGuidIndex*: UINT
    EncryptionGuid*: GUID

  D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT* = object 
    Output*: D3D11_AUTHENTICATED_QUERY_OUTPUT
    EncryptionGuid*: GUID

  D3D11_AUTHENTICATED_CONFIGURE_INPUT* = object 
    omac*: D3D11_OMAC
    ConfigureType*: GUID
    hChannel*: HANDLE
    SequenceNumber*: UINT

  D3D11_AUTHENTICATED_CONFIGURE_OUTPUT* = object 
    omac*: D3D11_OMAC
    ConfigureType*: GUID
    hChannel*: HANDLE
    SequenceNumber*: UINT
    ReturnCode*: HRESULT

  D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT* = object 
    Parameters*: D3D11_AUTHENTICATED_CONFIGURE_INPUT
    StartSequenceQuery*: UINT
    StartSequenceConfigure*: UINT

  D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT* = object 
    Parameters*: D3D11_AUTHENTICATED_CONFIGURE_INPUT
    Protections*: D3D11_AUTHENTICATED_PROTECTION_FLAGS

  D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT* = object 
    Parameters*: D3D11_AUTHENTICATED_CONFIGURE_INPUT
    DecoderHandle*: HANDLE
    CryptoSessionHandle*: HANDLE
    DeviceHandle*: HANDLE

  D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT* = object 
    Parameters*: D3D11_AUTHENTICATED_CONFIGURE_INPUT
    ProcessType*: D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE
    ProcessHandle*: HANDLE
    AllowAccess*: BOOL

  D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT* = object 
    Parameters*: D3D11_AUTHENTICATED_CONFIGURE_INPUT
    EncryptionGuid*: GUID




  ID3D11CryptoSessionVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11CryptoSession; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11CryptoSession): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11CryptoSession): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11CryptoSession; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11CryptoSession; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11CryptoSession; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11CryptoSession; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetCryptoType*: proc (This: ptr ID3D11CryptoSession; pCryptoType: ptr GUID) {.
        stdcall.}             # [annotation] 
    GetDecoderProfile*: proc (This: ptr ID3D11CryptoSession; 
                              pDecoderProfile: ptr GUID) {.stdcall.} # 
                                                                     # [annotation] 
    GetCertificateSize*: proc (This: ptr ID3D11CryptoSession; 
                               pCertificateSize: ptr UINT): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
    GetCertificate*: proc (This: ptr ID3D11CryptoSession; CertificateSize: UINT; 
                           pCertificate: ptr BYTE): HRESULT {.stdcall.} # 
                                                                        # [annotation] 
                                                                        # 
                                                                        # [annotation] 
    GetCryptoSessionHandle*: proc (This: ptr ID3D11CryptoSession; 
                                   pCryptoSessionHandle: ptr HANDLE) {.stdcall.} # 
                                                                                 # [annotation] 
  
  ID3D11CryptoSession* = object 
    lpVtbl*: ptr ID3D11CryptoSessionVtbl



  D3D11_TEX2D_VDOV* = object 
    ArraySlice*: UINT



  D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC_UNION* {.union.} = object
    Texture2D*: D3D11_TEX2D_VDOV
  D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC* = object
    DecodeProfile: GUID
    ViewDimension*: D3D11_VDOV_DIMENSION
    Union*: D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC_UNION


  ID3D11VideoDecoderOutputViewVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11VideoDecoderOutputView; 
                           riid: ptr IID; ppvObject: ptr pointer): HRESULT {.
        stdcall.}             # [in] 
                              # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11VideoDecoderOutputView): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11VideoDecoderOutputView): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11VideoDecoderOutputView; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11VideoDecoderOutputView; 
                           guid: ptr GUID; pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11VideoDecoderOutputView; 
                           guid: ptr GUID; DataSize: UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11VideoDecoderOutputView; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetResource*: proc (This: ptr ID3D11VideoDecoderOutputView; 
                        ppResource: ptr ptr ID3D11Resource) {.stdcall.} # 
                                                                        # [annotation] 
    GetDesc*: proc (This: ptr ID3D11VideoDecoderOutputView; 
                    pDesc: ptr D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC) {.stdcall.} # 
                                                                                 # [annotation] 
  
  ID3D11VideoDecoderOutputView* = object 
    lpVtbl*: ptr ID3D11VideoDecoderOutputViewVtbl




  D3D11_TEX2D_VPIV* = object 
    MipSlice*: UINT
    ArraySlice*: UINT



  D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC_UNION* {.union.} = object
    Texture2D*: D3D11_TEX2D_VPIV
  D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC* = object
    FourCC*: UINT
    ViewDimension*: D3D11_VPIV_DIMENSION
    Union*: D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC_UNION
  ID3D11VideoProcessorInputViewVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11VideoProcessorInputView; 
                           riid: ptr IID; ppvObject: ptr pointer): HRESULT {.
        stdcall.}             # [in] 
                              # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11VideoProcessorInputView): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11VideoProcessorInputView): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11VideoProcessorInputView; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11VideoProcessorInputView; 
                           guid: ptr GUID; pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11VideoProcessorInputView; 
                           guid: ptr GUID; DataSize: UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11VideoProcessorInputView; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetResource*: proc (This: ptr ID3D11VideoProcessorInputView; 
                        ppResource: ptr ptr ID3D11Resource) {.stdcall.} # 
                                                                        # [annotation] 
    GetDesc*: proc (This: ptr ID3D11VideoProcessorInputView; 
                    pDesc: ptr D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC) {.stdcall.} # 
                                                                                  # [annotation] 
  
  ID3D11VideoProcessorInputView* = object 
    lpVtbl*: ptr ID3D11VideoProcessorInputViewVtbl



  D3D11_VPOV_DIMENSION* {.size: sizeof(cint).} = enum 
    D3D11_VPOV_DIMENSION_UNKNOWN = 0, D3D11_VPOV_DIMENSION_TEXTURE2D = 1, 
    D3D11_VPOV_DIMENSION_TEXTURE2DARRAY = 2
  D3D11_TEX2D_VPOV* = object 
    MipSlice*: UINT

  D3D11_TEX2D_ARRAY_VPOV* = object 
    MipSlice*: UINT
    FirstArraySlice*: UINT
    ArraySize*: UINT
  D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC_UNION* {.union.} = object
    Texture2D*: D3D11_TEX2D_VPOV
    Texture2DArray*: D3D11_TEX2D_ARRAY_VPOV
  D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC* = object
    ViewDimension*: D3D11_VPOV_DIMENSION
    Union*: D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC_UNION


  ID3D11VideoProcessorOutputViewVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11VideoProcessorOutputView; 
                           riid: ptr IID; ppvObject: ptr pointer): HRESULT {.
        stdcall.}             # [in] 
                              # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11VideoProcessorOutputView): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11VideoProcessorOutputView): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11VideoProcessorOutputView; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11VideoProcessorOutputView; 
                           guid: ptr GUID; pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11VideoProcessorOutputView; 
                           guid: ptr GUID; DataSize: UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11VideoProcessorOutputView; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetResource*: proc (This: ptr ID3D11VideoProcessorOutputView; 
                        ppResource: ptr ptr ID3D11Resource) {.stdcall.} # 
                                                                        # [annotation] 
    GetDesc*: proc (This: ptr ID3D11VideoProcessorOutputView; 
                    pDesc: ptr D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC) {.stdcall.} # 
                                                                                   # [annotation] 
  
  ID3D11VideoProcessorOutputView* = object 
    lpVtbl*: ptr ID3D11VideoProcessorOutputViewVtbl



  ID3D11VideoContextVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11VideoContext; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11VideoContext): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11VideoContext): ULONG {.stdcall.}
    GetDevice*: proc (This: ptr ID3D11VideoContext; 
                      ppDevice: ptr ptr ID3D11Device) {.stdcall.} # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11VideoContext; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11VideoContext; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11VideoContext; 
                                    guid: ptr GUID; pData: ptr IUnknown): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    GetDecoderBuffer*: proc (This: ptr ID3D11VideoContext; 
                             pDecoder: ptr ID3D11VideoDecoder; 
                             `Type`: D3D11_VIDEO_DECODER_BUFFER_TYPE; 
                             pBufferSize: ptr UINT; ppBuffer: ptr pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    ReleaseDecoderBuffer*: proc (This: ptr ID3D11VideoContext; 
                                 pDecoder: ptr ID3D11VideoDecoder; 
                                 `Type`: D3D11_VIDEO_DECODER_BUFFER_TYPE): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    DecoderBeginFrame*: proc (This: ptr ID3D11VideoContext; 
                              pDecoder: ptr ID3D11VideoDecoder; 
                              pView: ptr ID3D11VideoDecoderOutputView; 
                              ContentKeySize: UINT; pContentKey: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    DecoderEndFrame*: proc (This: ptr ID3D11VideoContext; 
                            pDecoder: ptr ID3D11VideoDecoder): HRESULT {.stdcall.} # 
                                                                                   # [annotation] 
    SubmitDecoderBuffers*: proc (This: ptr ID3D11VideoContext; 
                                 pDecoder: ptr ID3D11VideoDecoder; 
                                 NumBuffers: UINT; pBufferDesc: ptr D3D11_VIDEO_DECODER_BUFFER_DESC): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    DecoderExtension*: proc (This: ptr ID3D11VideoContext; 
                             pDecoder: ptr ID3D11VideoDecoder; 
                             pExtensionData: ptr D3D11_VIDEO_DECODER_EXTENSION): APP_DEPRECATED_HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    VideoProcessorSetOutputTargetRect*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; Enable: BOOL; pRect: ptr RECT) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    VideoProcessorSetOutputBackgroundColor*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; YCbCr: BOOL; 
        pColor: ptr D3D11_VIDEO_COLOR) {.stdcall.} # [annotation] 
                                                   # [annotation] 
                                                   # [annotation] 
    VideoProcessorSetOutputColorSpace*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; 
        pColorSpace: ptr D3D11_VIDEO_PROCESSOR_COLOR_SPACE) {.stdcall.} # 
                                                                        # [annotation] 
                                                                        # 
                                                                        # [annotation] 
    VideoProcessorSetOutputAlphaFillMode*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; 
        AlphaFillMode: D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE; StreamIndex: UINT) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    VideoProcessorSetOutputConstriction*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; Enable: BOOL; Size: SIZE) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    VideoProcessorSetOutputStereoMode*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; Enable: BOOL) {.stdcall.} # 
                                                                             # [annotation] 
                                                                             # 
                                                                             # [annotation] 
    VideoProcessorSetOutputExtension*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; pExtensionGuid: ptr GUID; 
        DataSize: UINT; pData: pointer): APP_DEPRECATED_HRESULT {.stdcall.} # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
    VideoProcessorGetOutputTargetRect*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; Enabled: ptr BOOL; 
        pRect: ptr RECT) {.stdcall.} # [annotation] 
                                     # [annotation] 
                                     # [annotation] 
    VideoProcessorGetOutputBackgroundColor*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; pYCbCr: ptr BOOL; 
        pColor: ptr D3D11_VIDEO_COLOR) {.stdcall.} # [annotation] 
                                                   # [annotation] 
                                                   # [annotation] 
    VideoProcessorGetOutputColorSpace*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; 
        pColorSpace: ptr D3D11_VIDEO_PROCESSOR_COLOR_SPACE) {.stdcall.} # 
                                                                        # [annotation] 
                                                                        # 
                                                                        # [annotation] 
    VideoProcessorGetOutputAlphaFillMode*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; 
        pAlphaFillMode: ptr D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE; 
        pStreamIndex: ptr UINT) {.stdcall.} # [annotation] 
                                            # [annotation] 
                                            # [annotation] 
    VideoProcessorGetOutputConstriction*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; pEnabled: ptr BOOL; 
        pSize: ptr SIZE) {.stdcall.} # [annotation] 
                                     # [annotation] 
                                     # [annotation] 
    VideoProcessorGetOutputStereoMode*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; pEnabled: ptr BOOL) {.stdcall.} # 
                                                                                   # [annotation] 
                                                                                   # 
                                                                                   # [annotation] 
    VideoProcessorGetOutputExtension*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; pExtensionGuid: ptr GUID; 
        DataSize: UINT; pData: pointer): APP_DEPRECATED_HRESULT {.stdcall.} # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
    VideoProcessorSetStreamFrameFormat*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        FrameFormat: D3D11_VIDEO_FRAME_FORMAT) {.stdcall.} # [annotation] 
                                                           # [annotation] 
                                                           # [annotation] 
    VideoProcessorSetStreamColorSpace*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        pColorSpace: ptr D3D11_VIDEO_PROCESSOR_COLOR_SPACE) {.stdcall.} # 
                                                                        # [annotation] 
                                                                        # 
                                                                        # [annotation] 
                                                                        # 
                                                                        # [annotation] 
    VideoProcessorSetStreamOutputRate*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        OutputRate: D3D11_VIDEO_PROCESSOR_OUTPUT_RATE; RepeatFrame: BOOL; 
        pCustomRate: ptr DXGI_RATIONAL) {.stdcall.} # [annotation] 
                                                    # [annotation] 
                                                    # [annotation] 
                                                    # [annotation] 
                                                    # [annotation] 
    VideoProcessorSetStreamSourceRect*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        Enable: BOOL; pRect: ptr RECT) {.stdcall.} # [annotation] 
                                                   # [annotation] 
                                                   # [annotation] 
                                                   # [annotation] 
    VideoProcessorSetStreamDestRect*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        Enable: BOOL; pRect: ptr RECT) {.stdcall.} # [annotation] 
                                                   # [annotation] 
                                                   # [annotation] 
                                                   # [annotation] 
    VideoProcessorSetStreamAlpha*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        Enable: BOOL; Alpha: FLOAT) {.stdcall.} # [annotation] 
                                                # [annotation] 
                                                # [annotation] 
                                                # [annotation] 
    VideoProcessorSetStreamPalette*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        Count: UINT; pEntries: ptr UINT) {.stdcall.} # [annotation] 
                                                     # [annotation] 
                                                     # [annotation] 
                                                     # [annotation] 
    VideoProcessorSetStreamPixelAspectRatio*: proc (
        This: ptr ID3D11VideoContext; pVideoProcessor: ptr ID3D11VideoProcessor; 
        StreamIndex: UINT; Enable: BOOL; pSourceAspectRatio: ptr DXGI_RATIONAL; 
        pDestinationAspectRatio: ptr DXGI_RATIONAL) {.stdcall.} # [annotation] 
                                                                # [annotation] 
                                                                # [annotation] 
                                                                # [annotation] 
                                                                # [annotation] 
    VideoProcessorSetStreamLumaKey*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        Enable: BOOL; Lower: FLOAT; Upper: FLOAT) {.stdcall.} # [annotation] 
                                                              # [annotation] 
                                                              # [annotation] 
                                                              # [annotation] 
                                                              # [annotation] 
    VideoProcessorSetStreamStereoFormat*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        Enable: BOOL; Format: D3D11_VIDEO_PROCESSOR_STEREO_FORMAT; 
        LeftViewFrame0: BOOL; BaseViewFrame0: BOOL; 
        FlipMode: D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE; MonoOffset: cint) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    VideoProcessorSetStreamAutoProcessingMode*: proc (
        This: ptr ID3D11VideoContext; pVideoProcessor: ptr ID3D11VideoProcessor; 
        StreamIndex: UINT; Enable: BOOL) {.stdcall.} # [annotation] 
                                                     # [annotation] 
                                                     # [annotation] 
    VideoProcessorSetStreamFilter*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        Filter: D3D11_VIDEO_PROCESSOR_FILTER; Enable: BOOL; Level: cint) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    VideoProcessorSetStreamExtension*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        pExtensionGuid: ptr GUID; DataSize: UINT; pData: pointer): APP_DEPRECATED_HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    VideoProcessorGetStreamFrameFormat*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        pFrameFormat: ptr D3D11_VIDEO_FRAME_FORMAT) {.stdcall.} # [annotation] 
                                                                # [annotation] 
                                                                # [annotation] 
    VideoProcessorGetStreamColorSpace*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        pColorSpace: ptr D3D11_VIDEO_PROCESSOR_COLOR_SPACE) {.stdcall.} # 
                                                                        # [annotation] 
                                                                        # 
                                                                        # [annotation] 
                                                                        # 
                                                                        # [annotation] 
    VideoProcessorGetStreamOutputRate*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        pOutputRate: ptr D3D11_VIDEO_PROCESSOR_OUTPUT_RATE; 
        pRepeatFrame: ptr BOOL; pCustomRate: ptr DXGI_RATIONAL) {.stdcall.} # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
    VideoProcessorGetStreamSourceRect*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        pEnabled: ptr BOOL; pRect: ptr RECT) {.stdcall.} # [annotation] 
                                                         # [annotation] 
                                                         # [annotation] 
                                                         # [annotation] 
    VideoProcessorGetStreamDestRect*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        pEnabled: ptr BOOL; pRect: ptr RECT) {.stdcall.} # [annotation] 
                                                         # [annotation] 
                                                         # [annotation] 
                                                         # [annotation] 
    VideoProcessorGetStreamAlpha*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        pEnabled: ptr BOOL; pAlpha: ptr FLOAT) {.stdcall.} # [annotation] 
                                                           # [annotation] 
                                                           # [annotation] 
                                                           # [annotation] 
    VideoProcessorGetStreamPalette*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        Count: UINT; pEntries: ptr UINT) {.stdcall.} # [annotation] 
                                                     # [annotation] 
                                                     # [annotation] 
                                                     # [annotation] 
    VideoProcessorGetStreamPixelAspectRatio*: proc (
        This: ptr ID3D11VideoContext; pVideoProcessor: ptr ID3D11VideoProcessor; 
        StreamIndex: UINT; pEnabled: ptr BOOL; 
        pSourceAspectRatio: ptr DXGI_RATIONAL; 
        pDestinationAspectRatio: ptr DXGI_RATIONAL) {.stdcall.} # [annotation] 
                                                                # [annotation] 
                                                                # [annotation] 
                                                                # [annotation] 
                                                                # [annotation] 
    VideoProcessorGetStreamLumaKey*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        pEnabled: ptr BOOL; pLower: ptr FLOAT; pUpper: ptr FLOAT) {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    VideoProcessorGetStreamStereoFormat*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        pEnable: ptr BOOL; pFormat: ptr D3D11_VIDEO_PROCESSOR_STEREO_FORMAT; 
        pLeftViewFrame0: ptr BOOL; pBaseViewFrame0: ptr BOOL; 
        pFlipMode: ptr D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE; 
        MonoOffset: ptr cint) {.stdcall.} # [annotation] 
                                          # [annotation] 
                                          # [annotation] 
                                          # [annotation] 
                                          # [annotation] 
                                          # [annotation] 
                                          # [annotation] 
                                          # [annotation] 
    VideoProcessorGetStreamAutoProcessingMode*: proc (
        This: ptr ID3D11VideoContext; pVideoProcessor: ptr ID3D11VideoProcessor; 
        StreamIndex: UINT; pEnabled: ptr BOOL) {.stdcall.} # [annotation] 
                                                           # [annotation] 
                                                           # [annotation] 
    VideoProcessorGetStreamFilter*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        Filter: D3D11_VIDEO_PROCESSOR_FILTER; pEnabled: ptr BOOL; 
        pLevel: ptr cint) {.stdcall.} # [annotation] 
                                      # [annotation] 
                                      # [annotation] 
                                      # [annotation] 
                                      # [annotation] 
    VideoProcessorGetStreamExtension*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        pExtensionGuid: ptr GUID; DataSize: UINT; pData: pointer): APP_DEPRECATED_HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    VideoProcessorBlt*: proc (This: ptr ID3D11VideoContext; 
                              pVideoProcessor: ptr ID3D11VideoProcessor; 
                              pView: ptr ID3D11VideoProcessorOutputView; 
                              OutputFrame: UINT; StreamCount: UINT; 
                              pStreams: ptr D3D11_VIDEO_PROCESSOR_STREAM): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    NegotiateCryptoSessionKeyExchange*: proc (This: ptr ID3D11VideoContext; 
        pCryptoSession: ptr ID3D11CryptoSession; DataSize: UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    EncryptionBlt*: proc (This: ptr ID3D11VideoContext; 
                          pCryptoSession: ptr ID3D11CryptoSession; 
                          pSrcSurface: ptr ID3D11Texture2D; 
                          pDstSurface: ptr ID3D11Texture2D; IVSize: UINT; 
                          pIV: pointer) {.stdcall.} # [annotation] 
                                                    # [annotation] 
                                                    # [annotation] 
                                                    # [annotation] 
                                                    # [annotation] 
    DecryptionBlt*: proc (This: ptr ID3D11VideoContext; 
                          pCryptoSession: ptr ID3D11CryptoSession; 
                          pSrcSurface: ptr ID3D11Texture2D; 
                          pDstSurface: ptr ID3D11Texture2D; 
                          pEncryptedBlockInfo: ptr D3D11_ENCRYPTED_BLOCK_INFO; 
                          ContentKeySize: UINT; pContentKey: pointer; 
                          IVSize: UINT; pIV: pointer) {.stdcall.} # [annotation] 
                                                                  # [annotation] 
                                                                  # [annotation] 
                                                                  # [annotation] 
                                                                  # [annotation] 
                                                                  # [annotation] 
                                                                  # [annotation] 
                                                                  # [annotation] 
    StartSessionKeyRefresh*: proc (This: ptr ID3D11VideoContext; 
                                   pCryptoSession: ptr ID3D11CryptoSession; 
                                   RandomNumberSize: UINT; 
                                   pRandomNumber: pointer) {.stdcall.} # 
                                                                       # [annotation] 
                                                                       # 
                                                                       # [annotation] 
                                                                       # 
                                                                       # [annotation] 
    FinishSessionKeyRefresh*: proc (This: ptr ID3D11VideoContext; 
                                    pCryptoSession: ptr ID3D11CryptoSession) {.
        stdcall.}             # [annotation] 
    GetEncryptionBltKey*: proc (This: ptr ID3D11VideoContext; 
                                pCryptoSession: ptr ID3D11CryptoSession; 
                                KeySize: UINT; pReadbackKey: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    NegotiateAuthenticatedChannelKeyExchange*: proc (
        This: ptr ID3D11VideoContext; pChannel: ptr ID3D11AuthenticatedChannel; 
        DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # [annotation] 
                                                             # [annotation] 
                                                             # [annotation] 
    QueryAuthenticatedChannel*: proc (This: ptr ID3D11VideoContext; 
                                      pChannel: ptr ID3D11AuthenticatedChannel; 
                                      InputSize: UINT; pInput: pointer; 
                                      OutputSize: UINT; pOutput: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    ConfigureAuthenticatedChannel*: proc (This: ptr ID3D11VideoContext; 
        pChannel: ptr ID3D11AuthenticatedChannel; InputSize: UINT; 
        pInput: pointer; pOutput: ptr D3D11_AUTHENTICATED_CONFIGURE_OUTPUT): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    VideoProcessorSetStreamRotation*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        Enable: BOOL; Rotation: D3D11_VIDEO_PROCESSOR_ROTATION) {.stdcall.} # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
    VideoProcessorGetStreamRotation*: proc (This: ptr ID3D11VideoContext; 
        pVideoProcessor: ptr ID3D11VideoProcessor; StreamIndex: UINT; 
        pEnable: ptr BOOL; pRotation: ptr D3D11_VIDEO_PROCESSOR_ROTATION) {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
  
  ID3D11VideoContext* = object 
    lpVtbl*: ptr ID3D11VideoContextVtbl



  ID3D11VideoDeviceVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11VideoDevice; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11VideoDevice): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11VideoDevice): ULONG {.stdcall.}
    CreateVideoDecoder*: proc (This: ptr ID3D11VideoDevice; 
                               pVideoDesc: ptr D3D11_VIDEO_DECODER_DESC; 
                               pConfig: ptr D3D11_VIDEO_DECODER_CONFIG; 
                               ppDecoder: ptr ptr ID3D11VideoDecoder): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CreateVideoProcessor*: proc (This: ptr ID3D11VideoDevice; 
                                 pEnum: ptr ID3D11VideoProcessorEnumerator; 
                                 RateConversionIndex: UINT; 
                                 ppVideoProcessor: ptr ptr ID3D11VideoProcessor): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CreateAuthenticatedChannel*: proc (This: ptr ID3D11VideoDevice; ChannelType: D3D11_AUTHENTICATED_CHANNEL_TYPE; 
        ppAuthenticatedChannel: ptr ptr ID3D11AuthenticatedChannel): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    CreateCryptoSession*: proc (This: ptr ID3D11VideoDevice; 
                                pCryptoType: ptr GUID; 
                                pDecoderProfile: ptr GUID; 
                                pKeyExchangeType: ptr GUID; 
                                ppCryptoSession: ptr ptr ID3D11CryptoSession): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CreateVideoDecoderOutputView*: proc (This: ptr ID3D11VideoDevice; 
        pResource: ptr ID3D11Resource; 
        pDesc: ptr D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC; 
        ppVDOVView: ptr ptr ID3D11VideoDecoderOutputView): HRESULT {.stdcall.} # 
                                                                               # [annotation] 
                                                                               # 
                                                                               # [annotation] 
                                                                               # 
                                                                               # [annotation] 
    CreateVideoProcessorInputView*: proc (This: ptr ID3D11VideoDevice; 
        pResource: ptr ID3D11Resource; 
        pEnum: ptr ID3D11VideoProcessorEnumerator; 
        pDesc: ptr D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC; 
        ppVPIView: ptr ptr ID3D11VideoProcessorInputView): HRESULT {.stdcall.} # 
                                                                               # [annotation] 
                                                                               # 
                                                                               # [annotation] 
                                                                               # 
                                                                               # [annotation] 
                                                                               # 
                                                                               # [annotation] 
    CreateVideoProcessorOutputView*: proc (This: ptr ID3D11VideoDevice; 
        pResource: ptr ID3D11Resource; 
        pEnum: ptr ID3D11VideoProcessorEnumerator; 
        pDesc: ptr D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC; 
        ppVPOView: ptr ptr ID3D11VideoProcessorOutputView): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    CreateVideoProcessorEnumerator*: proc (This: ptr ID3D11VideoDevice; 
        pDesc: ptr D3D11_VIDEO_PROCESSOR_CONTENT_DESC; 
        ppEnum: ptr ptr ID3D11VideoProcessorEnumerator): HRESULT {.stdcall.} # 
                                                                             # [annotation] 
                                                                             # 
                                                                             # [annotation] 
    GetVideoDecoderProfileCount*: proc (This: ptr ID3D11VideoDevice): UINT {.
        stdcall.}
    GetVideoDecoderProfile*: proc (This: ptr ID3D11VideoDevice; Index: UINT; 
                                   pDecoderProfile: ptr GUID): HRESULT {.stdcall.} # 
                                                                                   # [annotation] 
                                                                                   # 
                                                                                   # [annotation] 
    CheckVideoDecoderFormat*: proc (This: ptr ID3D11VideoDevice; 
                                    pDecoderProfile: ptr GUID; 
                                    Format: DXGI_FORMAT; pSupported: ptr BOOL): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    GetVideoDecoderConfigCount*: proc (This: ptr ID3D11VideoDevice; 
                                       pDesc: ptr D3D11_VIDEO_DECODER_DESC; 
                                       pCount: ptr UINT): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    GetVideoDecoderConfig*: proc (This: ptr ID3D11VideoDevice; 
                                  pDesc: ptr D3D11_VIDEO_DECODER_DESC; 
                                  Index: UINT; 
                                  pConfig: ptr D3D11_VIDEO_DECODER_CONFIG): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    GetContentProtectionCaps*: proc (This: ptr ID3D11VideoDevice; 
                                     pCryptoType: ptr GUID; 
                                     pDecoderProfile: ptr GUID; pCaps: ptr D3D11_VIDEO_CONTENT_PROTECTION_CAPS): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CheckCryptoKeyExchange*: proc (This: ptr ID3D11VideoDevice; 
                                   pCryptoType: ptr GUID; 
                                   pDecoderProfile: ptr GUID; Index: UINT; 
                                   pKeyExchangeType: ptr GUID): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11VideoDevice; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11VideoDevice; guid: ptr GUID; 
                                    pData: ptr IUnknown): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
  
  ID3D11VideoDevice* = object 
    lpVtbl*: ptr ID3D11VideoDeviceVtbl



  ID3D11DeviceVtbl* = object 
    QueryInterface*: proc (This: ptr ID3D11Device; riid: ptr IID; 
                           ppvObject: ptr pointer): HRESULT {.stdcall.} # [in] 
                                                                        # 
                                                                        # [annotation][iid_is][out] 
    AddRef*: proc (This: ptr ID3D11Device): ULONG {.stdcall.}
    Release*: proc (This: ptr ID3D11Device): ULONG {.stdcall.}
    CreateBuffer*: proc (This: ptr ID3D11Device; pDesc: ptr D3D11_BUFFER_DESC; 
                         pInitialData: ptr D3D11_SUBRESOURCE_DATA; 
                         ppBuffer: ptr ptr ID3D11Buffer): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    CreateTexture1D*: proc (This: ptr ID3D11Device; 
                            pDesc: ptr D3D11_TEXTURE1D_DESC; 
                            pInitialData: ptr D3D11_SUBRESOURCE_DATA; 
                            ppTexture1D: ptr ptr ID3D11Texture1D): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CreateTexture2D*: proc (This: ptr ID3D11Device; 
                            pDesc: ptr D3D11_TEXTURE2D_DESC; 
                            pInitialData: ptr D3D11_SUBRESOURCE_DATA; 
                            ppTexture2D: ptr ptr ID3D11Texture2D): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CreateTexture3D*: proc (This: ptr ID3D11Device; 
                            pDesc: ptr D3D11_TEXTURE3D_DESC; 
                            pInitialData: ptr D3D11_SUBRESOURCE_DATA; 
                            ppTexture3D: ptr ptr ID3D11Texture3D): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CreateShaderResourceView*: proc (This: ptr ID3D11Device; 
                                     pResource: ptr ID3D11Resource; pDesc: ptr D3D11_SHADER_RESOURCE_VIEW_DESC; 
                                     ppSRView: ptr ptr ID3D11ShaderResourceView): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CreateUnorderedAccessView*: proc (This: ptr ID3D11Device; 
                                      pResource: ptr ID3D11Resource; pDesc: ptr D3D11_UNORDERED_ACCESS_VIEW_DESC; 
        ppUAView: ptr ptr ID3D11UnorderedAccessView): HRESULT {.stdcall.} # 
                                                                          # [annotation] 
                                                                          # 
                                                                          # [annotation] 
                                                                          # 
                                                                          # [annotation] 
    CreateRenderTargetView*: proc (This: ptr ID3D11Device; 
                                   pResource: ptr ID3D11Resource; 
                                   pDesc: ptr D3D11_RENDER_TARGET_VIEW_DESC; 
                                   ppRTView: ptr ptr ID3D11RenderTargetView): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CreateDepthStencilView*: proc (This: ptr ID3D11Device; 
                                   pResource: ptr ID3D11Resource; 
                                   pDesc: ptr D3D11_DEPTH_STENCIL_VIEW_DESC; 
        ppDepthStencilView: ptr ptr ID3D11DepthStencilView): HRESULT {.stdcall.} # 
                                                                                 # [annotation] 
                                                                                 # 
                                                                                 # [annotation] 
                                                                                 # 
                                                                                 # [annotation] 
    CreateInputLayout*: proc (This: ptr ID3D11Device; 
                              pInputElementDescs: ptr D3D11_INPUT_ELEMENT_DESC; 
                              NumElements: UINT; 
                              pShaderBytecodeWithInputSignature: pointer; 
                              BytecodeLength: SIZE_T; 
                              ppInputLayout: ptr ptr ID3D11InputLayout): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CreateVertexShader*: proc (This: ptr ID3D11Device; pShaderBytecode: pointer; 
                               BytecodeLength: SIZE_T; 
                               pClassLinkage: ptr ID3D11ClassLinkage; 
                               ppVertexShader: ptr ptr ID3D11VertexShader): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CreateGeometryShader*: proc (This: ptr ID3D11Device; 
                                 pShaderBytecode: pointer; 
                                 BytecodeLength: SIZE_T; 
                                 pClassLinkage: ptr ID3D11ClassLinkage; 
                                 ppGeometryShader: ptr ptr ID3D11GeometryShader): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CreateGeometryShaderWithStreamOutput*: proc (This: ptr ID3D11Device; 
        pShaderBytecode: pointer; BytecodeLength: SIZE_T; 
        pSODeclaration: ptr D3D11_SO_DECLARATION_ENTRY; NumEntries: UINT; 
        pBufferStrides: ptr UINT; NumStrides: UINT; RasterizedStream: UINT; 
        pClassLinkage: ptr ID3D11ClassLinkage; 
        ppGeometryShader: ptr ptr ID3D11GeometryShader): HRESULT {.stdcall.} # 
                                                                             # [annotation] 
                                                                             # 
                                                                             # [annotation] 
                                                                             # 
                                                                             # [annotation] 
                                                                             # 
                                                                             # [annotation] 
                                                                             # 
                                                                             # [annotation] 
                                                                             # 
                                                                             # [annotation] 
                                                                             # 
                                                                             # [annotation] 
                                                                             # 
                                                                             # [annotation] 
                                                                             # 
                                                                             # [annotation] 
    CreatePixelShader*: proc (This: ptr ID3D11Device; pShaderBytecode: pointer; 
                              BytecodeLength: SIZE_T; 
                              pClassLinkage: ptr ID3D11ClassLinkage; 
                              ppPixelShader: ptr ptr ID3D11PixelShader): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CreateHullShader*: proc (This: ptr ID3D11Device; pShaderBytecode: pointer; 
                             BytecodeLength: SIZE_T; 
                             pClassLinkage: ptr ID3D11ClassLinkage; 
                             ppHullShader: ptr ptr ID3D11HullShader): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CreateDomainShader*: proc (This: ptr ID3D11Device; pShaderBytecode: pointer; 
                               BytecodeLength: SIZE_T; 
                               pClassLinkage: ptr ID3D11ClassLinkage; 
                               ppDomainShader: ptr ptr ID3D11DomainShader): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CreateComputeShader*: proc (This: ptr ID3D11Device; 
                                pShaderBytecode: pointer; 
                                BytecodeLength: SIZE_T; 
                                pClassLinkage: ptr ID3D11ClassLinkage; 
                                ppComputeShader: ptr ptr ID3D11ComputeShader): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CreateClassLinkage*: proc (This: ptr ID3D11Device; 
                               ppLinkage: ptr ptr ID3D11ClassLinkage): HRESULT {.
        stdcall.}             # [annotation] 
    CreateBlendState*: proc (This: ptr ID3D11Device; 
                             pBlendStateDesc: ptr D3D11_BLEND_DESC; 
                             ppBlendState: ptr ptr ID3D11BlendState): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    CreateDepthStencilState*: proc (This: ptr ID3D11Device; pDepthStencilDesc: ptr D3D11_DEPTH_STENCIL_DESC; 
        ppDepthStencilState: ptr ptr ID3D11DepthStencilState): HRESULT {.stdcall.} # 
                                                                                   # [annotation] 
                                                                                   # 
                                                                                   # [annotation] 
    CreateRasterizerState*: proc (This: ptr ID3D11Device; 
                                  pRasterizerDesc: ptr D3D11_RASTERIZER_DESC; 
        ppRasterizerState: ptr ptr ID3D11RasterizerState): HRESULT {.stdcall.} # 
                                                                               # [annotation] 
                                                                               # 
                                                                               # [annotation] 
    CreateSamplerState*: proc (This: ptr ID3D11Device; 
                               pSamplerDesc: ptr D3D11_SAMPLER_DESC; 
                               ppSamplerState: ptr ptr ID3D11SamplerState): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    CreateQuery*: proc (This: ptr ID3D11Device; 
                        pQueryDesc: ptr D3D11_QUERY_DESC; 
                        ppQuery: ptr ptr ID3D11Query): HRESULT {.stdcall.} # 
                                                                           # [annotation] 
                                                                           # 
                                                                           # [annotation] 
    CreatePredicate*: proc (This: ptr ID3D11Device; 
                            pPredicateDesc: ptr D3D11_QUERY_DESC; 
                            ppPredicate: ptr ptr ID3D11Predicate): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
    CreateCounter*: proc (This: ptr ID3D11Device; 
                          pCounterDesc: ptr D3D11_COUNTER_DESC; 
                          ppCounter: ptr ptr ID3D11Counter): HRESULT {.stdcall.} # 
                                                                                 # [annotation] 
                                                                                 # 
                                                                                 # [annotation] 
    CreateDeferredContext*: proc (This: ptr ID3D11Device; ContextFlags: UINT; 
        ppDeferredContext: ptr ptr ID3D11DeviceContext): HRESULT {.stdcall.} # 
                                                                             # [annotation] 
    OpenSharedResource*: proc (This: ptr ID3D11Device; hResource: HANDLE; 
                               ReturnedInterface: ptr IID; 
                               ppResource: ptr pointer): HRESULT {.stdcall.} # 
                                                                             # [annotation] 
                                                                             # 
                                                                             # [annotation] 
                                                                             # 
                                                                             # [annotation] 
    CheckFormatSupport*: proc (This: ptr ID3D11Device; Format: DXGI_FORMAT; 
                               pFormatSupport: ptr UINT): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    CheckMultisampleQualityLevels*: proc (This: ptr ID3D11Device; 
        Format: DXGI_FORMAT; SampleCount: UINT; pNumQualityLevels: ptr UINT): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    CheckCounterInfo*: proc (This: ptr ID3D11Device; 
                             pCounterInfo: ptr D3D11_COUNTER_INFO) {.stdcall.} # 
                                                                               # [annotation] 
    CheckCounter*: proc (This: ptr ID3D11Device; pDesc: ptr D3D11_COUNTER_DESC; 
                         pType: ptr D3D11_COUNTER_TYPE; 
                         pActiveCounters: ptr UINT; szName: LPSTR; 
                         pNameLength: ptr UINT; szUnits: LPSTR; 
                         pUnitsLength: ptr UINT; szDescription: LPSTR; 
                         pDescriptionLength: ptr UINT): HRESULT {.stdcall.} # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
                                                                            # 
                                                                            # [annotation] 
    CheckFeatureSupport*: proc (This: ptr ID3D11Device; Feature: D3D11_FEATURE; 
                                pFeatureSupportData: pointer; 
                                FeatureSupportDataSize: UINT): HRESULT {.stdcall.} # 
                                                                                   # [annotation] 
    GetPrivateData*: proc (This: ptr ID3D11Device; guid: ptr GUID; 
                           pDataSize: ptr UINT; pData: pointer): HRESULT {.
        stdcall.}             # [annotation] 
                              # [annotation] 
                              # [annotation] 
    SetPrivateData*: proc (This: ptr ID3D11Device; guid: ptr GUID; 
                           DataSize: UINT; pData: pointer): HRESULT {.stdcall.} # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
                                                                                # 
                                                                                # [annotation] 
    SetPrivateDataInterface*: proc (This: ptr ID3D11Device; guid: ptr GUID; 
                                    pData: ptr IUnknown): HRESULT {.stdcall.} # 
                                                                              # [annotation] 
                                                                              # 
                                                                              # [annotation] 
    GetFeatureLevel*: proc (This: ptr ID3D11Device): D3D_FEATURE_LEVEL {.stdcall.}
    GetCreationFlags*: proc (This: ptr ID3D11Device): UINT {.stdcall.}
    GetDeviceRemovedReason*: proc (This: ptr ID3D11Device): HRESULT {.stdcall.}
    GetImmediateContext*: proc (This: ptr ID3D11Device; 
                                ppImmediateContext: ptr ptr ID3D11DeviceContext) {.
        stdcall.}             # [annotation] 
    SetExceptionMode*: proc (This: ptr ID3D11Device; RaiseFlags: UINT): HRESULT {.
        stdcall.}
    GetExceptionMode*: proc (This: ptr ID3D11Device): UINT {.stdcall.}

  ID3D11Device* = object 
    lpVtbl*: ptr ID3D11DeviceVtbl




# interface __MIDL_itf_d3d11_0000_0041 
# [local] 

type 
  D3D11_CREATE_DEVICE_FLAG* {.size: sizeof(cint).} = enum 
    D3D11_CREATE_DEVICE_SINGLETHREADED = 0x00000001, 
    D3D11_CREATE_DEVICE_DEBUG = 0x00000002, 
    D3D11_CREATE_DEVICE_SWITCH_TO_REF = 0x00000004, 
    D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 0x00000008, 
    D3D11_CREATE_DEVICE_BGRA_SUPPORT = 0x00000020, 
    D3D11_CREATE_DEVICE_DEBUGGABLE = 0x00000040, D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 0x00000080, 
    D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT = 0x00000100, 
    D3D11_CREATE_DEVICE_VIDEO_SUPPORT = 0x00000800

const 
  D3D11_SDK_VERSION* = (7)

#/////////////////////////////////////////////////////////////////////////
# D3D11CreateDevice
# ------------------
#
# pAdapter
#      If NULL, D3D11CreateDevice will choose the primary adapter and
#      create a new instance from a temporarily created IDXGIFactory.
#      If non-NULL, D3D11CreateDevice will register the appropriate
#      device, if necessary (via IDXGIAdapter::RegisterDrver), before
#      creating the device.
# DriverType
#      Specifies the driver type to be created: hardware, reference or
#      null.
# Software
#      HMODULE of a DLL implementing a software rasterizer. Must be NULL for
#      non-Software driver types.
# Flags
#      Any of those documented for D3D11CreateDeviceAndSwapChain.
# pFeatureLevels
#      Any of those documented for D3D11CreateDeviceAndSwapChain.
# FeatureLevels
#      Size of feature levels array.
# SDKVersion
#      SDK version. Use the D3D11_SDK_VERSION macro.
# ppDevice
#      Pointer to returned interface. May be NULL.
# pFeatureLevel
#      Pointer to returned feature level. May be NULL.
# ppImmediateContext
#      Pointer to returned interface. May be NULL.
#
# Return Values
#  Any of those documented for 
#          CreateDXGIFactory1
#          IDXGIFactory::EnumAdapters
#          IDXGIAdapter::RegisterDriver
#          D3D11CreateDevice
#
#/////////////////////////////////////////////////////////////////////////

type 
  PFN_D3D11_CREATE_DEVICE* = proc (a2: ptr IDXGIAdapter; a3: D3D_DRIVER_TYPE; 
                                   a4: HMODULE; a5: UINT; 
                                   a6: ptr D3D_FEATURE_LEVEL; 
                                   FeatureLevels: UINT; a8: UINT; 
                                   a9: ptr ptr ID3D11Device; 
                                   a10: ptr D3D_FEATURE_LEVEL; 
                                   a11: ptr ptr ID3D11DeviceContext): HRESULT {.
      stdcall.}

proc D3D11CreateDevice*(pAdapter: ptr IDXGIAdapter; DriverType: D3D_DRIVER_TYPE; 
                        Software: HMODULE; Flags: UINT; 
                        pFeatureLevels: ptr D3D_FEATURE_LEVEL; 
                        FeatureLevels: UINT; SDKVersion: UINT; 
                        ppDevice: ptr ptr ID3D11Device; 
                        pFeatureLevel: ptr D3D_FEATURE_LEVEL; 
                        ppImmediateContext: ptr ptr ID3D11DeviceContext): HRESULT {.
    stdcall, importc}
#/////////////////////////////////////////////////////////////////////////
# D3D11CreateDeviceAndSwapChain
# ------------------------------
#
# ppAdapter
#      If NULL, D3D11CreateDevice will choose the primary adapter and 
#      create a new instance from a temporarily created IDXGIFactory.
#      If non-NULL, D3D11CreateDevice will register the appropriate
#      device, if necessary (via IDXGIAdapter::RegisterDrver), before
#      creating the device.
# DriverType
#      Specifies the driver type to be created: hardware, reference or
#      null.
# Software
#      HMODULE of a DLL implementing a software rasterizer. Must be NULL for
#      non-Software driver types.
# Flags
#      Any of those documented for D3D11CreateDevice.
# pFeatureLevels
#      Array of any of the following:
#          D3D_FEATURE_LEVEL_11_0
#          D3D_FEATURE_LEVEL_10_1
#          D3D_FEATURE_LEVEL_10_0
#          D3D_FEATURE_LEVEL_9_3
#          D3D_FEATURE_LEVEL_9_2
#          D3D_FEATURE_LEVEL_9_1
#      Order indicates sequence in which instantiation will be attempted. If
#      NULL, then the implied order is the same as previously listed (i.e. 
#      prefer most features available). 
# FeatureLevels
#      Size of feature levels array.
# SDKVersion
#      SDK version. Use the D3D11_SDK_VERSION macro.
# pSwapChainDesc
#      Swap chain description, may be NULL.
# ppSwapChain
#      Pointer to returned interface. May be NULL.
# ppDevice
#      Pointer to returned interface. May be NULL.
# pFeatureLevel
#      Pointer to returned feature level. May be NULL.
# ppImmediateContext
#      Pointer to returned interface. May be NULL.
#
# Return Values
#  Any of those documented for 
#          CreateDXGIFactory1
#          IDXGIFactory::EnumAdapters
#          IDXGIAdapter::RegisterDriver
#          D3D11CreateDevice
#          IDXGIFactory::CreateSwapChain
#
#/////////////////////////////////////////////////////////////////////////

type 
  PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN* = proc (a2: ptr IDXGIAdapter; 
      a3: D3D_DRIVER_TYPE; a4: HMODULE; a5: UINT; a6: ptr D3D_FEATURE_LEVEL; 
      FeatureLevels: UINT; a8: UINT; a9: ptr DXGI_SWAP_CHAIN_DESC; 
      a10: ptr ptr IDXGISwapChain; a11: ptr ptr ID3D11Device; 
      a12: ptr D3D_FEATURE_LEVEL; a13: ptr ptr ID3D11DeviceContext): HRESULT {.
      stdcall.}

proc D3D11CreateDeviceAndSwapChain*(pAdapter: ptr IDXGIAdapter; 
                                    DriverType: D3D_DRIVER_TYPE; 
                                    Software: HMODULE; Flags: UINT; 
                                    pFeatureLevels: ptr D3D_FEATURE_LEVEL; 
                                    FeatureLevels: UINT; SDKVersion: UINT; 
                                    pSwapChainDesc: ptr DXGI_SWAP_CHAIN_DESC; 
                                    ppSwapChain: ptr ptr IDXGISwapChain; 
                                    ppDevice: ptr ptr ID3D11Device; 
                                    pFeatureLevel: ptr D3D_FEATURE_LEVEL; 
    ppImmediateContext: ptr ptr ID3D11DeviceContext): HRESULT {.stdcall, importc.}
var IID_ID3D11DeviceChild* {.importc.}: GUID

var IID_ID3D11DepthStencilState* {.importc.}: GUID

var IID_ID3D11BlendState* {.importc.}: GUID

var IID_ID3D11RasterizerState* {.importc.}: GUID

var IID_ID3D11Resource* {.importc.}: GUID

var IID_ID3D11Buffer* {.importc.}: GUID

var IID_ID3D11Texture1D* {.importc.}: GUID

var IID_ID3D11Texture2D* {.importc.}: GUID

var IID_ID3D11Texture3D* {.importc.}: GUID

var IID_ID3D11View* {.importc.}: GUID

var IID_ID3D11ShaderResourceView* {.importc.}: GUID

var IID_ID3D11RenderTargetView* {.importc.}: GUID

var IID_ID3D11DepthStencilView* {.importc.}: GUID

var IID_ID3D11UnorderedAccessView* {.importc.}: GUID

var IID_ID3D11VertexShader* {.importc.}: GUID

var IID_ID3D11HullShader* {.importc.}: GUID

var IID_ID3D11DomainShader* {.importc.}: GUID

var IID_ID3D11GeometryShader* {.importc.}: GUID

var IID_ID3D11PixelShader* {.importc.}: GUID

var IID_ID3D11ComputeShader* {.importc.}: GUID

var IID_ID3D11InputLayout* {.importc.}: GUID

var IID_ID3D11SamplerState* {.importc.}: GUID

var IID_ID3D11Asynchronous* {.importc.}: GUID

var IID_ID3D11Query* {.importc.}: GUID

var IID_ID3D11Predicate* {.importc.}: GUID

var IID_ID3D11Counter* {.importc.}: GUID

var IID_ID3D11ClassInstance* {.importc.}: GUID

var IID_ID3D11ClassLinkage* {.importc.}: GUID

var IID_ID3D11CommandList* {.importc.}: GUID

var IID_ID3D11DeviceContext* {.importc.}: GUID

var IID_ID3D11VideoDecoder* {.importc.}: GUID

var IID_ID3D11VideoProcessorEnumerator* {.importc.}: GUID

var IID_ID3D11VideoProcessor* {.importc.}: GUID

var IID_ID3D11AuthenticatedChannel* {.importc.}: GUID

var IID_ID3D11CryptoSession* {.importc.}: GUID

var IID_ID3D11VideoDecoderOutputView* {.importc.}: GUID

var IID_ID3D11VideoProcessorInputView* {.importc.}: GUID

var IID_ID3D11VideoProcessorOutputView* {.importc.}: GUID

var IID_ID3D11VideoContext* {.importc.}: GUID

var IID_ID3D11VideoDevice* {.importc.}: GUID

var IID_ID3D11Device* {.importc.}: GUID

var D3D11_KEY_EXCHANGE_RSAES_OAEP* {.importc.}: GUID

var D3D11_AUTHENTICATED_QUERY_PROTECTION* {.importc.}: GUID

var D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE* {.importc.}: GUID

var D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE* {.importc.}: GUID

var D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION* {.importc.}: GUID

var D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT* {.importc.}: GUID

var D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS* {.importc.}: GUID

var D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT* {.importc.}: GUID

var D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT* {.importc.}: GUID

var D3D11_AUTHENTICATED_QUERY_OUTPUT_ID* {.importc.}: GUID

var D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES* {.importc.}: GUID

var D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT* {.importc.}: GUID

var D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID* {.importc.}: GUID

var D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE* {.importc.}: GUID

var D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE* {.importc.}: GUID

var D3D11_AUTHENTICATED_CONFIGURE_PROTECTION* {.importc.}: GUID

var D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION* {.importc.}: GUID

var D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE* {.importc.}: GUID

var D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE* {.importc.}: GUID

var D3D11_CRYPTO_TYPE_AES128_CTR* {.importc.}: GUID

var D3D11_DECODER_PROFILE_MPEG2_MOCOMP* {.importc.}: GUID

var D3D11_DECODER_PROFILE_MPEG2_IDCT* {.importc.}: GUID

var D3D11_DECODER_PROFILE_MPEG2_VLD* {.importc.}: GUID

var D3D11_DECODER_PROFILE_MPEG1_VLD* {.importc.}: GUID

var D3D11_DECODER_PROFILE_MPEG2and1_VLD* {.importc.}: GUID

var D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT* {.importc.}: GUID

var D3D11_DECODER_PROFILE_H264_MOCOMP_FGT* {.importc.}: GUID

var D3D11_DECODER_PROFILE_H264_IDCT_NOFGT* {.importc.}: GUID

var D3D11_DECODER_PROFILE_H264_IDCT_FGT* {.importc.}: GUID

var D3D11_DECODER_PROFILE_H264_VLD_NOFGT* {.importc.}: GUID

var D3D11_DECODER_PROFILE_H264_VLD_FGT* {.importc.}: GUID

var D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT* {.importc.}: GUID

var D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT* {.importc.}: GUID

var D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT* {.importc.}: GUID

var D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT* {.importc.}: GUID

var D3D11_DECODER_PROFILE_WMV8_POSTPROC* {.importc.}: GUID

var D3D11_DECODER_PROFILE_WMV8_MOCOMP* {.importc.}: GUID

var D3D11_DECODER_PROFILE_WMV9_POSTPROC* {.importc.}: GUID

var D3D11_DECODER_PROFILE_WMV9_MOCOMP* {.importc.}: GUID

var D3D11_DECODER_PROFILE_WMV9_IDCT* {.importc.}: GUID

var D3D11_DECODER_PROFILE_VC1_POSTPROC* {.importc.}: GUID

var D3D11_DECODER_PROFILE_VC1_MOCOMP* {.importc.}: GUID

var D3D11_DECODER_PROFILE_VC1_IDCT* {.importc.}: GUID

var D3D11_DECODER_PROFILE_VC1_VLD* {.importc.}: GUID

var D3D11_DECODER_PROFILE_VC1_D2010* {.importc.}: GUID

var D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE* {.importc.}: GUID

var D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC* {.importc.}: GUID

var D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC* {.importc.}: GUID

var D3D11_DECODER_PROFILE_HEVC_VLD_MAIN* {.importc.}: GUID

var D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10* {.importc.}: GUID

# Additional Prototypes for ALL interfaces 
# end of Additional Prototypes

