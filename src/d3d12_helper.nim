
import winim
import d3d12
import Unknwn
import macros
import dxgi
type IID = TIID
type GUID = TGUID
type UINT = uint32
type INT = int32
type FLOAT = float32
type BYTE = TBYTE
type BOOL = WINBOOL
type UINT8 = uint8
type UINT64 = uint64
type UINT16 = uint16

#to generate bridge procs do a find/replace with first
#(\w*)\*: proc (\(.*?;?)\n?\s*(.*;)?\n?\s*(.*;)?\n?\s*(.*\))(:.*)? \{\.\n?.*\.\}
#proc $1*$2$3$4$5$6 = This.lpVtbl.$1$2$3$4$5
#then
#This.lpVtbl(\.\w*.*?)(:.*?;)
#This.lpVtbl$1,
#then
#This.lpVtbl(\.\w*.*?)(:.*?\))
#This.lpVtbl$1)
proc QueryInterface*(This: ptr ID3D12Object; riid: ptr IID; ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid, ppvObject)
proc AddRef*(This: ptr ID3D12Object; ): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12Object; ): ULONG = This.lpVtbl.Release(This)
proc GetPrivateData*(This: ptr ID3D12Object; guid: ptr GUID; pDataSize: ptr UINT; pData: pointer): HRESULT = This.lpVtbl.GetPrivateData(This, guid, pDataSize, pData)
proc SetPrivateData*(This: ptr ID3D12Object; guid: ptr GUID; DataSize: UINT; pData: pointer): HRESULT = This.lpVtbl.SetPrivateData(This, guid, DataSize, pData)
proc SetPrivateDataInterface*(This: ptr ID3D12Object; guid: ptr GUID; pData: ptr IUnknown): HRESULT = This.lpVtbl.SetPrivateDataInterface(This, guid, pData)
proc SetName*(This: ptr ID3D12Object; Name: LPCWSTR; ): HRESULT = This.lpVtbl.SetName(This, Name )

proc QueryInterface*(This: ptr ID3D12DeviceChild; riid: ptr IID; ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid, ppvObject)
proc AddRef*(This: ptr ID3D12DeviceChild): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12DeviceChild): ULONG = This.lpVtbl.Release(This)
proc GetPrivateData*(This: ptr ID3D12DeviceChild; guid: ptr GUID; pDataSize: ptr UINT; pData: pointer): HRESULT = This.lpVtbl.GetPrivateData(This, guid, pDataSize, pData)
proc SetPrivateData*(This: ptr ID3D12DeviceChild; guid: ptr GUID; DataSize: UINT; pData: pointer): HRESULT = This.lpVtbl.SetPrivateData(This, guid, DataSize, pData)
proc SetPrivateDataInterface*(This: ptr ID3D12DeviceChild; guid: ptr GUID; pData: ptr IUnknown): HRESULT = This.lpVtbl.SetPrivateDataInterface(This, guid, pData)
proc SetName*(This: ptr ID3D12DeviceChild; Name: LPCWSTR ): HRESULT = This.lpVtbl.SetName(This, Name)
proc GetDevice*(This: ptr ID3D12DeviceChild; riid: ptr IID; ppvDevice: ptr pointer): HRESULT = This.lpVtbl.GetDevice(This, riid, ppvDevice)

proc QueryInterface*(This: ptr ID3D12RootSignature; riid: ptr IID; ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid, ppvObject)
proc AddRef*(This: ptr ID3D12RootSignature ): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12RootSignature ): ULONG = This.lpVtbl.Release(This)
proc GetPrivateData*(This: ptr ID3D12RootSignature; guid: ptr GUID; pDataSize: ptr UINT; pData: pointer): HRESULT = This.lpVtbl.GetPrivateData(This, guid, pDataSize, pData)
proc SetPrivateData*(This: ptr ID3D12RootSignature; guid: ptr GUID; DataSize: UINT; pData: pointer): HRESULT = This.lpVtbl.SetPrivateData(This, guid, DataSize, pData)
proc SetPrivateDataInterface*(This: ptr ID3D12RootSignature; guid: ptr GUID; pData: ptr IUnknown): HRESULT = This.lpVtbl.SetPrivateDataInterface(This, guid, pData)
proc SetName*(This: ptr ID3D12RootSignature; Name: LPCWSTR): HRESULT = This.lpVtbl.SetName(This, Name)
proc GetDevice*(This: ptr ID3D12RootSignature; riid: ptr IID; ppvDevice: ptr pointer): HRESULT = This.lpVtbl.GetDevice(This, riid, ppvDevice)

proc QueryInterface*(This: ptr ID3D12Resource; riid: ptr IID; ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid, ppvObject)
proc AddRef*( This: ptr ID3D12Resource): ULONG = This.lpVtbl.AddRef( This)
proc Release*( This: ptr ID3D12Resource): ULONG = This.lpVtbl.Release( This)
proc GetPrivateData*(This: ptr ID3D12Resource; guid: ptr GUID; pDataSize: ptr UINT; pData: pointer): HRESULT = This.lpVtbl.GetPrivateData(This, guid, pDataSize, pData)
proc SetPrivateData*(This: ptr ID3D12Resource; guid: ptr GUID; DataSize: UINT; pData: pointer): HRESULT = This.lpVtbl.SetPrivateData(This, guid, DataSize, pData)
proc SetPrivateDataInterface*(This: ptr ID3D12Resource; guid: ptr GUID; pData: ptr IUnknown): HRESULT = This.lpVtbl.SetPrivateDataInterface(This, guid, pData)
proc SetName*( This: ptr ID3D12Resource; Name: LPCWSTR): HRESULT = This.lpVtbl.SetName( This, Name)
proc GetDevice*(This: ptr ID3D12Resource; riid: ptr IID; ppvDevice: ptr pointer): HRESULT = This.lpVtbl.GetDevice(This, riid, ppvDevice)
proc Map*(This: ptr ID3D12Resource; Subresource: UINT; pReadRange: ptr D3D12_RANGE; ppData: ptr pointer): HRESULT = This.lpVtbl.Map(This, Subresource, pReadRange, ppData)
proc Unmap*(This: ptr ID3D12Resource; Subresource: UINT; pWrittenRange: ptr D3D12_RANGE) = This.lpVtbl.Unmap(This, Subresource, pWrittenRange)
proc GetDesc*( This: ptr ID3D12Resource): D3D12_RESOURCE_DESC = This.lpVtbl.GetDesc( This)
proc GetGPUVirtualAddress*( This: ptr ID3D12Resource): D3D12_GPU_VIRTUAL_ADDRESS = This.lpVtbl.GetGPUVirtualAddress( This)
proc WriteToSubresource*(This: ptr ID3D12Resource; DstSubresource: UINT; pDstBox: ptr D3D12_BOX; pSrcData: pointer; SrcRowPitch: UINT; SrcDepthPitch: UINT): HRESULT = This.lpVtbl.WriteToSubresource(This, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch)
proc ReadFromSubresource*(This: ptr ID3D12Resource; pDstData: pointer; DstRowPitch: UINT; DstDepthPitch: UINT; SrcSubresource: UINT; pSrcBox: ptr D3D12_BOX): HRESULT = This.lpVtbl.ReadFromSubresource(This, pDstData, DstRowPitch, DstDepthPitch, SrcSubresource, pSrcBox)
proc GetHeapProperties*(This: ptr ID3D12Resource; pHeapProperties: ptr D3D12_HEAP_PROPERTIES; pHeapFlags: ptr D3D12_HEAP_FLAGS): HRESULT = This.lpVtbl.GetHeapProperties(This, pHeapProperties, pHeapFlags)



proc QueryInterface*(This: ptr ID3D12RootSignatureDeserializer; riid: ptr IID; ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid, ppvObject)
proc AddRef*(This: ptr ID3D12RootSignatureDeserializer): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12RootSignatureDeserializer): ULONG = This.lpVtbl.Release(This)
proc GetRootSignatureDesc*(This: ptr ID3D12RootSignatureDeserializer  ): ptr D3D12_ROOT_SIGNATURE_DESC = This.lpVtbl.GetRootSignatureDesc(This)

proc QueryInterface*(This: ptr ID3D12Pageable; riid: ptr IID;ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid,ppvObject)
proc AddRef*(This: ptr ID3D12Pageable): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12Pageable): ULONG = This.lpVtbl.Release(This)
proc GetPrivateData*(This: ptr ID3D12Pageable; guid: ptr GUID;pDataSize: ptr UINT; pData: pointer): HRESULT = This.lpVtbl.GetPrivateData(This, guid,pDataSize, pData)
proc SetPrivateData*(This: ptr ID3D12Pageable; guid: ptr GUID;DataSize: UINT; pData: pointer): HRESULT = This.lpVtbl.SetPrivateData(This, guid,DataSize, pData)
proc SetPrivateDataInterface*(This: ptr ID3D12Pageable; guid: ptr GUID;pData: ptr IUnknown): HRESULT = This.lpVtbl.SetPrivateDataInterface(This, guid,pData)
proc SetName*(This: ptr ID3D12Pageable;Name: LPCWSTR): HRESULT = This.lpVtbl.SetName(This,Name)
proc GetDevice*(This: ptr ID3D12Pageable; riid: ptr IID;ppvDevice: ptr pointer): HRESULT = This.lpVtbl.GetDevice(This, riid,ppvDevice)

#ID3D12Heap
proc QueryInterface*(This: ptr ID3D12Heap; riid: ptr IID;ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid,ppvObject)
proc AddRef*(This: ptr ID3D12Heap): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12Heap): ULONG = This.lpVtbl.Release(This)
proc GetPrivateData*(This: ptr ID3D12Heap; guid: ptr GUID;pDataSize: ptr UINT; pData: pointer): HRESULT = This.lpVtbl.GetPrivateData(This, guid,pDataSize, pData)
proc SetPrivateData*(This: ptr ID3D12Heap; guid: ptr GUID; DataSize: UINT;pData: pointer): HRESULT = This.lpVtbl.SetPrivateData(This, guid, DataSize,pData)
proc SetPrivateDataInterface*(This: ptr ID3D12Heap; guid: ptr GUID;pData: ptr IUnknown): HRESULT = This.lpVtbl.SetPrivateDataInterface(This, guid,pData)
proc SetName*(This: ptr ID3D12Heap;Name: LPCWSTR): HRESULT = This.lpVtbl.SetName(This,Name)
proc GetDevice*(This: ptr ID3D12Heap; riid: ptr IID;ppvDevice: ptr pointer): HRESULT = This.lpVtbl.GetDevice(This, riid,ppvDevice)
proc GetDesc*(This: ptr ID3D12Heap): D3D12_HEAP_DESC = This.lpVtbl.GetDesc(This)

#ID3D12CommandAllocator
proc QueryInterface*(This: ptr ID3D12CommandAllocator; riid: ptr IID;ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid,ppvObject)
proc AddRef*(This: ptr ID3D12CommandAllocator): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12CommandAllocator): ULONG = This.lpVtbl.Release(This)
proc GetPrivateData*(This: ptr ID3D12CommandAllocator; guid: ptr GUID;pDataSize: ptr UINT; pData: pointer): HRESULT = This.lpVtbl.GetPrivateData(This, guid,pDataSize, pData)
proc SetPrivateData*(This: ptr ID3D12CommandAllocator; guid: ptr GUID;DataSize: UINT; pData: pointer): HRESULT = This.lpVtbl.SetPrivateData(This, guid,DataSize, pData)
proc SetPrivateDataInterface*(This: ptr ID3D12CommandAllocator;guid: ptr GUID; pData: ptr IUnknown): HRESULT = This.lpVtbl.SetPrivateDataInterface(This,guid, pData)
proc SetName*(This: ptr ID3D12CommandAllocator;Name: LPCWSTR): HRESULT = This.lpVtbl.SetName(This,Name)
proc GetDevice*(This: ptr ID3D12CommandAllocator; riid: ptr IID;ppvDevice: ptr pointer): HRESULT = This.lpVtbl.GetDevice(This, riid,ppvDevice)
proc Reset*(This: ptr ID3D12CommandAllocator): HRESULT = This.lpVtbl.Reset(This)

#ID3D12Fence
proc QueryInterface*(This: ptr ID3D12Fence; riid: ptr IID;ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid,ppvObject)
proc AddRef*(This: ptr ID3D12Fence): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12Fence): ULONG = This.lpVtbl.Release(This)
proc GetPrivateData*(This: ptr ID3D12Fence; guid: ptr GUID;pDataSize: ptr UINT; pData: pointer): HRESULT = This.lpVtbl.GetPrivateData(This, guid,pDataSize, pData)
proc SetPrivateData*(This: ptr ID3D12Fence; guid: ptr GUID;DataSize: UINT; pData: pointer): HRESULT = This.lpVtbl.SetPrivateData(This, guid,DataSize, pData)
proc SetPrivateDataInterface*(This: ptr ID3D12Fence; guid: ptr GUID;pData: ptr IUnknown): HRESULT = This.lpVtbl.SetPrivateDataInterface(This, guid,pData)
proc SetName*(This: ptr ID3D12Fence;Name: LPCWSTR): HRESULT = This.lpVtbl.SetName(This,Name)
proc GetDevice*(This: ptr ID3D12Fence; riid: ptr IID;ppvDevice: ptr pointer): HRESULT = This.lpVtbl.GetDevice(This, riid,ppvDevice)
proc GetCompletedValue*(This: ptr ID3D12Fence): UINT64 = This.lpVtbl.GetCompletedValue(This)
proc SetEventOnCompletion*(This: ptr ID3D12Fence; Value: UINT64;hEvent: HANDLE): HRESULT = This.lpVtbl.SetEventOnCompletion(This, Value,hEvent)
proc Signal*(This: ptr ID3D12Fence;Value: UINT64): HRESULT = This.lpVtbl.Signal(This,Value)

#ID3D12PipelineState
proc QueryInterface*(This: ptr ID3D12PipelineState; riid: ptr IID;ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid,ppvObject)
proc AddRef*(This: ptr ID3D12PipelineState): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12PipelineState): ULONG = This.lpVtbl.Release(This)
proc GetPrivateData*(This: ptr ID3D12PipelineState; guid: ptr GUID;pDataSize: ptr UINT;pData: pointer): HRESULT = This.lpVtbl.GetPrivateData(This, guid,pDataSize,pData)
proc SetPrivateData*(This: ptr ID3D12PipelineState; guid: ptr GUID;DataSize: UINT;pData: pointer): HRESULT = This.lpVtbl.SetPrivateData(This, guid,DataSize,pData)
proc SetPrivateDataInterface*(This: ptr ID3D12PipelineState;guid: ptr GUID;pData: ptr IUnknown): HRESULT = This.lpVtbl.SetPrivateDataInterface(This,guid,pData)
proc SetName*(This: ptr ID3D12PipelineState;Name: LPCWSTR): HRESULT = This.lpVtbl.SetName(This,Name)
proc GetDevice*(This: ptr ID3D12PipelineState; riid: ptr IID;ppvDevice: ptr pointer): HRESULT = This.lpVtbl.GetDevice(This, riid,ppvDevice)
proc GetCachedBlob*(This: ptr ID3D12PipelineState;ppBlob: ptr ptr ID3DBlob): HRESULT = This.lpVtbl.GetCachedBlob(This,ppBlob)

#ID3D12DescriptorHeap
proc QueryInterface*(This: ptr ID3D12DescriptorHeap; riid: ptr IID;ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid,ppvObject)
proc AddRef*(This: ptr ID3D12DescriptorHeap): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12DescriptorHeap): ULONG = This.lpVtbl.Release(This)
proc GetPrivateData*(This: ptr ID3D12DescriptorHeap; guid: ptr GUID;pDataSize: ptr UINT;pData: pointer): HRESULT = This.lpVtbl.GetPrivateData(This, guid,pDataSize,pData)
proc SetPrivateData*(This: ptr ID3D12DescriptorHeap; guid: ptr GUID;DataSize: UINT;pData: pointer): HRESULT = This.lpVtbl.SetPrivateData(This, guid,DataSize,pData)
proc SetPrivateDataInterface*(This: ptr ID3D12DescriptorHeap;guid: ptr GUID;pData: ptr IUnknown): HRESULT = This.lpVtbl.SetPrivateDataInterface(This,guid,pData)
proc SetName*(This: ptr ID3D12DescriptorHeap;Name: LPCWSTR): HRESULT = This.lpVtbl.SetName(This,Name)
proc GetDevice*(This: ptr ID3D12DescriptorHeap; riid: ptr IID;ppvDevice: ptr pointer): HRESULT = This.lpVtbl.GetDevice(This, riid,ppvDevice)
proc GetDesc*(This: ptr ID3D12DescriptorHeap): D3D12_DESCRIPTOR_HEAP_DESC = This.lpVtbl.GetDesc(This)
proc GetCPUDescriptorHandleForHeapStart*(This: ptr ID3D12DescriptorHeap): D3D12_CPU_DESCRIPTOR_HANDLE =
  discard This.lpVtbl.GetCPUDescriptorHandleForHeapStart(This, addr result)
proc GetGPUDescriptorHandleForHeapStart*(This: ptr ID3D12DescriptorHeap): D3D12_GPU_DESCRIPTOR_HANDLE =
  discard This.lpVtbl.GetGPUDescriptorHandleForHeapStart(This, addr result)

#ID3D12QueryHeap
proc QueryInterface*(This: ptr ID3D12QueryHeap; riid: ptr IID;ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid,ppvObject)
proc AddRef*(This: ptr ID3D12QueryHeap): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12QueryHeap): ULONG = This.lpVtbl.Release(This)
proc GetPrivateData*(This: ptr ID3D12QueryHeap; guid: ptr GUID;pDataSize: ptr UINT;pData: pointer): HRESULT = This.lpVtbl.GetPrivateData(This, guid,pDataSize,pData)
proc SetPrivateData*(This: ptr ID3D12QueryHeap; guid: ptr GUID;DataSize: UINT;pData: pointer): HRESULT = This.lpVtbl.SetPrivateData(This, guid,DataSize,pData)
proc SetPrivateDataInterface*(This: ptr ID3D12QueryHeap; guid: ptr GUID;pData: ptr IUnknown): HRESULT = This.lpVtbl.SetPrivateDataInterface(This, guid,pData)
proc SetName*(This: ptr ID3D12QueryHeap;Name: LPCWSTR): HRESULT = This.lpVtbl.SetName(This,Name)
proc GetDevice*(This: ptr ID3D12QueryHeap; riid: ptr IID;ppvDevice: ptr pointer): HRESULT = This.lpVtbl.GetDevice(This, riid,ppvDevice)

#ID3D12CommandSignature
proc QueryInterface*(This: ptr ID3D12CommandSignature; riid: ptr IID;ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid,ppvObject)
proc AddRef*(This: ptr ID3D12CommandSignature): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12CommandSignature): ULONG = This.lpVtbl.Release(This)
proc GetPrivateData*(This: ptr ID3D12CommandSignature; guid: ptr GUID;pDataSize: ptr UINT;pData: pointer): HRESULT = This.lpVtbl.GetPrivateData(This, guid,pDataSize,pData)
proc SetPrivateData*(This: ptr ID3D12CommandSignature; guid: ptr GUID;DataSize: UINT;pData: pointer): HRESULT = This.lpVtbl.SetPrivateData(This, guid,DataSize,pData)
proc SetPrivateDataInterface*(This: ptr ID3D12CommandSignature;guid: ptr GUID;pData: ptr IUnknown): HRESULT = This.lpVtbl.SetPrivateDataInterface(This,guid,pData)
proc SetName*(This: ptr ID3D12CommandSignature;Name: LPCWSTR): HRESULT = This.lpVtbl.SetName(This,Name)
proc GetDevice*(This: ptr ID3D12CommandSignature; riid: ptr IID;ppvDevice: ptr pointer): HRESULT = This.lpVtbl.GetDevice(This, riid,ppvDevice)

#ID3D12CommandList
proc QueryInterface*(This: ptr ID3D12CommandList; riid: ptr IID;ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid,ppvObject)
proc AddRef*(This: ptr ID3D12CommandList): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12CommandList): ULONG = This.lpVtbl.Release(This)
proc GetPrivateData*(This: ptr ID3D12CommandList; guid: ptr GUID;pDataSize: ptr UINT;pData: pointer): HRESULT = This.lpVtbl.GetPrivateData(This, guid,pDataSize,pData)
proc SetPrivateData*(This: ptr ID3D12CommandList; guid: ptr GUID;DataSize: UINT;pData: pointer): HRESULT = This.lpVtbl.SetPrivateData(This, guid,DataSize,pData)
proc SetPrivateDataInterface*(This: ptr ID3D12CommandList; guid: ptr GUID;pData: ptr IUnknown): HRESULT = This.lpVtbl.SetPrivateDataInterface(This, guid,pData)
proc SetName*(This: ptr ID3D12CommandList;Name: LPCWSTR): HRESULT = This.lpVtbl.SetName(This,Name)
proc GetDevice*(This: ptr ID3D12CommandList; riid: ptr IID;ppvDevice: ptr pointer): HRESULT = This.lpVtbl.GetDevice(This, riid,ppvDevice)
proc GetType*(This: ptr ID3D12CommandList): D3D12_COMMAND_LIST_TYPE = This.lpVtbl.GetType(This)

#ID3D12GraphicsCommandList
proc QueryInterface*(This: ptr ID3D12GraphicsCommandList; riid: ptr IID;ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid,ppvObject)
proc AddRef*(This: ptr ID3D12GraphicsCommandList): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12GraphicsCommandList): ULONG = This.lpVtbl.Release(This)
proc GetPrivateData*(This: ptr ID3D12GraphicsCommandList; guid: ptr GUID;pDataSize: ptr UINT;pData: pointer): HRESULT = This.lpVtbl.GetPrivateData(This, guid,pDataSize,pData)
proc SetPrivateData*(This: ptr ID3D12GraphicsCommandList; guid: ptr GUID;DataSize: UINT;pData: pointer): HRESULT = This.lpVtbl.SetPrivateData(This, guid,DataSize,pData)
proc SetPrivateDataInterface*(This: ptr ID3D12GraphicsCommandList;guid: ptr GUID;pData: ptr IUnknown): HRESULT = This.lpVtbl.SetPrivateDataInterface(This,guid,pData)
proc SetName*(This: ptr ID3D12GraphicsCommandList;Name: LPCWSTR): HRESULT = This.lpVtbl.SetName(This,Name)
proc GetDevice*(This: ptr ID3D12GraphicsCommandList; riid: ptr IID;ppvDevice: ptr pointer): HRESULT = This.lpVtbl.GetDevice(This, riid,ppvDevice)
proc GetType*(This: ptr ID3D12GraphicsCommandList): D3D12_COMMAND_LIST_TYPE = This.lpVtbl.GetType(This)
proc Close*(This: ptr ID3D12GraphicsCommandList): HRESULT = This.lpVtbl.Close(This)
proc Reset*(This: ptr ID3D12GraphicsCommandList;pAllocator: ptr ID3D12CommandAllocator;pInitialState: ptr ID3D12PipelineState): HRESULT = This.lpVtbl.Reset(This,pAllocator,pInitialState)
proc ClearState*(This: ptr ID3D12GraphicsCommandList;pPipelineState: ptr ID3D12PipelineState) = This.lpVtbl.ClearState(This,pPipelineState)
proc DrawInstanced*(This: ptr ID3D12GraphicsCommandList;VertexCountPerInstance: UINT; InstanceCount: UINT;StartVertexLocation: UINT; StartInstanceLocation: UINT) = This.lpVtbl.DrawInstanced(This,VertexCountPerInstance, InstanceCount,StartVertexLocation, StartInstanceLocation)
proc DrawIndexedInstanced*(This: ptr ID3D12GraphicsCommandList; IndexCountPerInstance: UINT; InstanceCount: UINT; StartIndexLocation: UINT; BaseVertexLocation: INT;StartInstanceLocation: UINT) = This.lpVtbl.DrawIndexedInstanced(This, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation,StartInstanceLocation)
proc Dispatch*(This: ptr ID3D12GraphicsCommandList;ThreadGroupCountX: UINT; ThreadGroupCountY: UINT;ThreadGroupCountZ: UINT) = This.lpVtbl.Dispatch(This,ThreadGroupCountX, ThreadGroupCountY,ThreadGroupCountZ)
proc CopyBufferRegion*(This: ptr ID3D12GraphicsCommandList;pDstBuffer: ptr ID3D12Resource; DstOffset: UINT64;pSrcBuffer: ptr ID3D12Resource; SrcOffset: UINT64;NumBytes: UINT64) = This.lpVtbl.CopyBufferRegion(This,pDstBuffer, DstOffset,pSrcBuffer, SrcOffset,NumBytes)
proc CopyTextureRegion*(This: ptr ID3D12GraphicsCommandList; pDst: ptr D3D12_TEXTURE_COPY_LOCATION; DstX: UINT; DstY: UINT; DstZ: UINT; pSrc: ptr D3D12_TEXTURE_COPY_LOCATION;pSrcBox: ptr D3D12_BOX) = This.lpVtbl.CopyTextureRegion(This, pDst, DstX, DstY, DstZ, pSrc,pSrcBox)
proc CopyResource*(This: ptr ID3D12GraphicsCommandList;pDstResource: ptr ID3D12Resource;pSrcResource: ptr ID3D12Resource) = This.lpVtbl.CopyResource(This,pDstResource,pSrcResource)
proc CopyTiles*(This: ptr ID3D12GraphicsCommandList; pTiledResource: ptr ID3D12Resource; pTileRegionStartCoordinate: ptr D3D12_TILED_RESOURCE_COORDINATE; pTileRegionSize: ptr D3D12_TILE_REGION_SIZE; pBuffer: ptr ID3D12Resource; BufferStartOffsetInBytes: UINT64;Flags: D3D12_TILE_COPY_FLAGS) = This.lpVtbl.CopyTiles(This, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes,Flags)
proc ResolveSubresource*(This: ptr ID3D12GraphicsCommandList; pDstResource: ptr ID3D12Resource; DstSubresource: UINT; pSrcResource: ptr ID3D12Resource; SrcSubresource: UINT;Format: DXGI_FORMAT) = This.lpVtbl.ResolveSubresource(This, pDstResource, DstSubresource, pSrcResource, SrcSubresource,Format)
proc IASetPrimitiveTopology*(This: ptr ID3D12GraphicsCommandList;PrimitiveTopology: D3D12_PRIMITIVE_TOPOLOGY) = This.lpVtbl.IASetPrimitiveTopology(This,PrimitiveTopology)
proc RSSetViewports*(This: ptr ID3D12GraphicsCommandList;NumViewports: UINT;pViewports: ptr D3D12_VIEWPORT) = This.lpVtbl.RSSetViewports(This,NumViewports,pViewports)
proc RSSetScissorRects*(This: ptr ID3D12GraphicsCommandList;NumRects: UINT;pRects: ptr D3D12_RECT) = This.lpVtbl.RSSetScissorRects(This,NumRects,pRects)
proc OMSetBlendFactor*(This: ptr ID3D12GraphicsCommandList;BlendFactor: array[4, FLOAT]) = This.lpVtbl.OMSetBlendFactor(This,BlendFactor)
proc OMSetStencilRef*(This: ptr ID3D12GraphicsCommandList;StencilRef: UINT) = This.lpVtbl.OMSetStencilRef(This,StencilRef)
proc SetPipelineState*(This: ptr ID3D12GraphicsCommandList;pPipelineState: ptr ID3D12PipelineState) = This.lpVtbl.SetPipelineState(This,pPipelineState)
proc ResourceBarrier*(This: ptr ID3D12GraphicsCommandList;NumBarriers: UINT;pBarriers: ptr D3D12_RESOURCE_BARRIER) = This.lpVtbl.ResourceBarrier(This,NumBarriers,pBarriers)
proc ExecuteBundle*(This: ptr ID3D12GraphicsCommandList;pCommandList: ptr ID3D12GraphicsCommandList) = This.lpVtbl.ExecuteBundle(This,pCommandList)
proc SetDescriptorHeaps*(This: ptr ID3D12GraphicsCommandList;NumDescriptorHeaps: UINT;ppDescriptorHeaps: ptr ptr ID3D12DescriptorHeap) = This.lpVtbl.SetDescriptorHeaps(This,NumDescriptorHeaps,ppDescriptorHeaps)
proc SetComputeRootSignature*(This: ptr ID3D12GraphicsCommandList;pRootSignature: ptr ID3D12RootSignature) = This.lpVtbl.SetComputeRootSignature(This,pRootSignature)
proc SetGraphicsRootSignature*(This: ptr ID3D12GraphicsCommandList;pRootSignature: ptr ID3D12RootSignature) = This.lpVtbl.SetGraphicsRootSignature(This,pRootSignature)
proc SetComputeRootDescriptorTable*(This: ptr ID3D12GraphicsCommandList;RootParameterIndex: UINT;BaseDescriptor: D3D12_GPU_DESCRIPTOR_HANDLE) = This.lpVtbl.SetComputeRootDescriptorTable(This,RootParameterIndex,BaseDescriptor)
proc SetGraphicsRootDescriptorTable*(This: ptr ID3D12GraphicsCommandList;RootParameterIndex: UINT;BaseDescriptor: D3D12_GPU_DESCRIPTOR_HANDLE) = This.lpVtbl.SetGraphicsRootDescriptorTable(This,RootParameterIndex,BaseDescriptor)
proc SetComputeRoot32BitConstant*(This: ptr ID3D12GraphicsCommandList;RootParameterIndex: UINT; SrcData: UINT;DestOffsetIn32BitValues: UINT) = This.lpVtbl.SetComputeRoot32BitConstant(This,RootParameterIndex, SrcData,DestOffsetIn32BitValues)
proc SetGraphicsRoot32BitConstant*(This: ptr ID3D12GraphicsCommandList;RootParameterIndex: UINT; SrcData: UINT;DestOffsetIn32BitValues: UINT) = This.lpVtbl.SetGraphicsRoot32BitConstant(This,RootParameterIndex, SrcData,DestOffsetIn32BitValues)
proc SetComputeRoot32BitConstants*(This: ptr ID3D12GraphicsCommandList;RootParameterIndex: UINT; Num32BitValuesToSet: UINT; pSrcData: pointer;DestOffsetIn32BitValues: UINT) = This.lpVtbl.SetComputeRoot32BitConstants(This,RootParameterIndex, Num32BitValuesToSet, pSrcData,DestOffsetIn32BitValues)
proc SetGraphicsRoot32BitConstants*(This: ptr ID3D12GraphicsCommandList;RootParameterIndex: UINT; Num32BitValuesToSet: UINT; pSrcData: pointer;DestOffsetIn32BitValues: UINT) = This.lpVtbl.SetGraphicsRoot32BitConstants(This,RootParameterIndex, Num32BitValuesToSet, pSrcData,DestOffsetIn32BitValues)
proc SetComputeRootConstantBufferView*(This: ptr ID3D12GraphicsCommandList; RootParameterIndex: UINT;BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) = This.lpVtbl.SetComputeRootConstantBufferView(This, RootParameterIndex,BufferLocation)
proc SetGraphicsRootConstantBufferView*(This: ptr ID3D12GraphicsCommandList; RootParameterIndex: UINT;BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) = This.lpVtbl.SetGraphicsRootConstantBufferView(This, RootParameterIndex,BufferLocation)
proc SetComputeRootShaderResourceView*(This: ptr ID3D12GraphicsCommandList; RootParameterIndex: UINT;BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) = This.lpVtbl.SetComputeRootShaderResourceView(This, RootParameterIndex,BufferLocation)
proc SetGraphicsRootShaderResourceView*(This: ptr ID3D12GraphicsCommandList; RootParameterIndex: UINT;BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) = This.lpVtbl.SetGraphicsRootShaderResourceView(This, RootParameterIndex,BufferLocation)
proc SetComputeRootUnorderedAccessView*(This: ptr ID3D12GraphicsCommandList; RootParameterIndex: UINT;BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) = This.lpVtbl.SetComputeRootUnorderedAccessView(This, RootParameterIndex,BufferLocation)
proc SetGraphicsRootUnorderedAccessView*(This: ptr ID3D12GraphicsCommandList; RootParameterIndex: UINT;BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) = This.lpVtbl.SetGraphicsRootUnorderedAccessView(This, RootParameterIndex,BufferLocation)
proc IASetIndexBuffer*(This: ptr ID3D12GraphicsCommandList;pView: ptr D3D12_INDEX_BUFFER_VIEW) = This.lpVtbl.IASetIndexBuffer(This,pView)
proc IASetVertexBuffers*(This: ptr ID3D12GraphicsCommandList;StartSlot: UINT; NumViews: UINT;pViews: ptr D3D12_VERTEX_BUFFER_VIEW) = This.lpVtbl.IASetVertexBuffers(This,StartSlot, NumViews,pViews)
proc SOSetTargets*(This: ptr ID3D12GraphicsCommandList; StartSlot: UINT;NumViews: UINT;pViews: ptr D3D12_STREAM_OUTPUT_BUFFER_VIEW) = This.lpVtbl.SOSetTargets(This, StartSlot,NumViews,pViews)
proc OMSetRenderTargets*(This: ptr ID3D12GraphicsCommandList; NumRenderTargetDescriptors: UINT; pRenderTargetDescriptors: ptr D3D12_CPU_DESCRIPTOR_HANDLE; RTsSingleHandleToDescriptorRange: BOOL;pDepthStencilDescriptor: ptr D3D12_CPU_DESCRIPTOR_HANDLE) = This.lpVtbl.OMSetRenderTargets(This, NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange,pDepthStencilDescriptor)
proc ClearDepthStencilView*(This: ptr ID3D12GraphicsCommandList; DepthStencilView: D3D12_CPU_DESCRIPTOR_HANDLE; ClearFlags: D3D12_CLEAR_FLAGS; Depth: FLOAT; Stencil: UINT8; NumRects: UINT;pRects: ptr D3D12_RECT) = This.lpVtbl.ClearDepthStencilView(This, DepthStencilView, ClearFlags, Depth, Stencil, NumRects,pRects)
proc ClearRenderTargetView*(This: ptr ID3D12GraphicsCommandList;RenderTargetView: D3D12_CPU_DESCRIPTOR_HANDLE;ColorRGBA: array[4, FLOAT]; NumRects: UINT;pRects: ptr D3D12_RECT) = This.lpVtbl.ClearRenderTargetView(This,RenderTargetView,ColorRGBA, NumRects,pRects)
proc ClearUnorderedAccessViewUint*(This: ptr ID3D12GraphicsCommandList; ViewGPUHandleInCurrentHeap: D3D12_GPU_DESCRIPTOR_HANDLE; ViewCPUHandle: D3D12_CPU_DESCRIPTOR_HANDLE; pResource: ptr ID3D12Resource; Values: array[4, UINT]; NumRects: UINT;pRects: ptr D3D12_RECT) = This.lpVtbl.ClearUnorderedAccessViewUint(This, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects,pRects)
proc ClearUnorderedAccessViewFloat*(This: ptr ID3D12GraphicsCommandList; ViewGPUHandleInCurrentHeap: D3D12_GPU_DESCRIPTOR_HANDLE; ViewCPUHandle: D3D12_CPU_DESCRIPTOR_HANDLE; pResource: ptr ID3D12Resource; Values: array[4, FLOAT]; NumRects: UINT;pRects: ptr D3D12_RECT) = This.lpVtbl.ClearUnorderedAccessViewFloat(This, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects,pRects)
proc DiscardResource*(This: ptr ID3D12GraphicsCommandList;pResource: ptr ID3D12Resource;pRegion: ptr D3D12_DISCARD_REGION) = This.lpVtbl.DiscardResource(This,pResource,pRegion)
proc BeginQuery*(This: ptr ID3D12GraphicsCommandList;pQueryHeap: ptr ID3D12QueryHeap; Type: D3D12_QUERY_TYPE;Index: UINT) = This.lpVtbl.BeginQuery(This,pQueryHeap, Type,Index)
proc EndQuery*(This: ptr ID3D12GraphicsCommandList;pQueryHeap: ptr ID3D12QueryHeap; Type: D3D12_QUERY_TYPE;Index: UINT) = This.lpVtbl.EndQuery(This,pQueryHeap, Type,Index)
proc ResolveQueryData*(This: ptr ID3D12GraphicsCommandList; pQueryHeap: ptr ID3D12QueryHeap; Type: D3D12_QUERY_TYPE; StartIndex: UINT; NumQueries: UINT; pDestinationBuffer: ptr ID3D12Resource;AlignedDestinationBufferOffset: UINT64) = This.lpVtbl.ResolveQueryData(This, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer,AlignedDestinationBufferOffset)
proc SetPredication*(This: ptr ID3D12GraphicsCommandList;pBuffer: ptr ID3D12Resource;AlignedBufferOffset: UINT64;Operation: D3D12_PREDICATION_OP) = This.lpVtbl.SetPredication(This,pBuffer,AlignedBufferOffset,Operation)
proc SetMarker*(This: ptr ID3D12GraphicsCommandList; Metadata: UINT;pData: pointer;Size: UINT) = This.lpVtbl.SetMarker(This, Metadata,pData,Size)
proc BeginEvent*(This: ptr ID3D12GraphicsCommandList; Metadata: UINT;pData: pointer;Size: UINT) = This.lpVtbl.BeginEvent(This, Metadata,pData,Size)
proc EndEvent*(This: ptr ID3D12GraphicsCommandList) = This.lpVtbl.EndEvent(This)
proc ExecuteIndirect*(This: ptr ID3D12GraphicsCommandList; pCommandSignature: ptr ID3D12CommandSignature; MaxCommandCount: UINT; pArgumentBuffer: ptr ID3D12Resource; ArgumentBufferOffset: UINT64; pCountBuffer: ptr ID3D12Resource;CountBufferOffset: UINT64) = This.lpVtbl.ExecuteIndirect(This, pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer,CountBufferOffset)


#ID3D12CommandQueue
proc QueryInterface*(This: ptr ID3D12CommandQueue; riid: ptr IID;ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid,ppvObject)
proc AddRef*(This: ptr ID3D12CommandQueue): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12CommandQueue): ULONG = This.lpVtbl.Release(This)
proc GetPrivateData*(This: ptr ID3D12CommandQueue; guid: ptr GUID;pDataSize: ptr UINT;pData: pointer): HRESULT = This.lpVtbl.GetPrivateData(This, guid,pDataSize,pData)
proc SetPrivateData*(This: ptr ID3D12CommandQueue; guid: ptr GUID;DataSize: UINT;pData: pointer): HRESULT = This.lpVtbl.SetPrivateData(This, guid,DataSize,pData)
proc SetPrivateDataInterface*(This: ptr ID3D12CommandQueue;guid: ptr GUID;pData: ptr IUnknown): HRESULT = This.lpVtbl.SetPrivateDataInterface(This,guid,pData)
proc SetName*(This: ptr ID3D12CommandQueue;Name: LPCWSTR): HRESULT = This.lpVtbl.SetName(This,Name)
proc GetDevice*(This: ptr ID3D12CommandQueue; riid: ptr IID;ppvDevice: ptr pointer): HRESULT = This.lpVtbl.GetDevice(This, riid,ppvDevice)
proc UpdateTileMappings*(This: ptr ID3D12CommandQueue; pResource: ptr ID3D12Resource; NumResourceRegions: UINT; pResourceRegionStartCoordinates: ptr D3D12_TILED_RESOURCE_COORDINATE; pResourceRegionSizes: ptr D3D12_TILE_REGION_SIZE; pHeap: ptr ID3D12Heap; NumRanges: UINT; pRangeFlags: ptr D3D12_TILE_RANGE_FLAGS; pHeapRangeStartOffsets: ptr UINT; pRangeTileCounts: ptr UINT;Flags: D3D12_TILE_MAPPING_FLAGS) = This.lpVtbl.UpdateTileMappings(This, pResource, NumResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, NumRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, Flags)
proc CopyTileMappings*(This: ptr ID3D12CommandQueue; pDstResource: ptr ID3D12Resource; pDstRegionStartCoordinate: ptr D3D12_TILED_RESOURCE_COORDINATE; pSrcResource: ptr ID3D12Resource; pSrcRegionStartCoordinate: ptr D3D12_TILED_RESOURCE_COORDINATE; pRegionSize: ptr D3D12_TILE_REGION_SIZE;Flags: D3D12_TILE_MAPPING_FLAGS) = This.lpVtbl.CopyTileMappings(This, pDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize,Flags)
proc ExecuteCommandLists*(This: ptr ID3D12CommandQueue;NumCommandLists: UINT;ppCommandLists: ptr ptr ID3D12CommandList) = This.lpVtbl.ExecuteCommandLists(This,NumCommandLists,ppCommandLists)
proc SetMarker*(This: ptr ID3D12CommandQueue; Metadata: UINT;pData: pointer;Size: UINT) = This.lpVtbl.SetMarker(This, Metadata,pData,Size)
proc BeginEvent*(This: ptr ID3D12CommandQueue; Metadata: UINT;pData: pointer;Size: UINT) = This.lpVtbl.BeginEvent(This, Metadata,pData,Size)
proc EndEvent*(This: ptr ID3D12CommandQueue) = This.lpVtbl.EndEvent(This)
proc Signal*(This: ptr ID3D12CommandQueue; pFence: ptr ID3D12Fence;Value: UINT64): HRESULT = This.lpVtbl.Signal(This, pFence,Value)
proc Wait*(This: ptr ID3D12CommandQueue; pFence: ptr ID3D12Fence;Value: UINT64): HRESULT = This.lpVtbl.Wait(This, pFence,Value)
proc GetTimestampFrequency*(This: ptr ID3D12CommandQueue;pFrequency: ptr UINT64): HRESULT = This.lpVtbl.GetTimestampFrequency(This,pFrequency)
proc GetClockCalibration*(This: ptr ID3D12CommandQueue;pGpuTimestamp: ptr UINT64;pCpuTimestamp: ptr UINT64): HRESULT = This.lpVtbl.GetClockCalibration(This,pGpuTimestamp,pCpuTimestamp)
proc GetDesc*(This: ptr ID3D12CommandQueue): D3D12_COMMAND_QUEUE_DESC = This.lpVtbl.GetDesc(This)

#I3D12Device
proc QueryInterface*(This: ptr ID3D12Device; riid: ptr IID;ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid,ppvObject)
proc AddRef*(This: ptr ID3D12Device): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12Device): ULONG = This.lpVtbl.Release(This)
proc GetPrivateData*(This: ptr ID3D12Device; guid: ptr GUID;pDataSize: ptr UINT;pData: pointer): HRESULT = This.lpVtbl.GetPrivateData(This, guid,pDataSize,pData)
proc SetPrivateData*(This: ptr ID3D12Device; guid: ptr GUID;DataSize: UINT;pData: pointer): HRESULT = This.lpVtbl.SetPrivateData(This, guid,DataSize,pData)
proc SetPrivateDataInterface*(This: ptr ID3D12Device; guid: ptr GUID;pData: ptr IUnknown): HRESULT = This.lpVtbl.SetPrivateDataInterface(This, guid,pData)
proc SetName*(This: ptr ID3D12Device;Name: LPCWSTR): HRESULT = This.lpVtbl.SetName(This,Name)
proc GetNodeCount*(This: ptr ID3D12Device): UINT = This.lpVtbl.GetNodeCount(This)
proc CreateCommandQueue*(This: ptr ID3D12Device;pDesc: ptr D3D12_COMMAND_QUEUE_DESC;riid: ptr IID; ppCommandQueue: ptr pointer): HRESULT = This.lpVtbl.CreateCommandQueue(This,pDesc,riid, ppCommandQueue)
proc CreateCommandAllocator*(This: ptr ID3D12Device;`type`: D3D12_COMMAND_LIST_TYPE;riid: ptr IID;ppCommandAllocator: ptr pointer): HRESULT = This.lpVtbl.CreateCommandAllocator(This,`type`,riid,ppCommandAllocator)
proc CreateGraphicsPipelineState*(This: ptr ID3D12Device; pDesc: ptr D3D12_GRAPHICS_PIPELINE_STATE_DESC;riid: ptr IID;ppPipelineState: ptr pointer): HRESULT = This.lpVtbl.CreateGraphicsPipelineState(This, pDesc,riid,ppPipelineState)
proc CreateComputePipelineState*(This: ptr ID3D12Device; pDesc: ptr D3D12_COMPUTE_PIPELINE_STATE_DESC;riid: ptr IID;ppPipelineState: ptr pointer): HRESULT = This.lpVtbl.CreateComputePipelineState(This, pDesc,riid,ppPipelineState)
proc CreateCommandList*(This: ptr ID3D12Device; nodeMask: UINT; `type`: D3D12_COMMAND_LIST_TYPE; pCommandAllocator: ptr ID3D12CommandAllocator; pInitialState: ptr ID3D12PipelineState; riid: ptr IID;ppCommandList: ptr pointer): HRESULT = This.lpVtbl.CreateCommandList(This, nodeMask, `type`, pCommandAllocator, pInitialState, riid,ppCommandList)
proc CheckFeatureSupport*(This: ptr ID3D12Device; Feature: D3D12_FEATURE;pFeatureSupportData: pointer;FeatureSupportDataSize: UINT): HRESULT = This.lpVtbl.CheckFeatureSupport(This, Feature,pFeatureSupportData,FeatureSupportDataSize)
proc CreateDescriptorHeap*(This: ptr ID3D12Device; pDescriptorHeapDesc: ptr D3D12_DESCRIPTOR_HEAP_DESC;riid: ptr IID;ppvHeap: ptr pointer): HRESULT = This.lpVtbl.CreateDescriptorHeap(This, pDescriptorHeapDesc,riid,ppvHeap)
proc GetDescriptorHandleIncrementSize*(This: ptr ID3D12Device;DescriptorHeapType: D3D12_DESCRIPTOR_HEAP_TYPE): UINT = This.lpVtbl.GetDescriptorHandleIncrementSize(This,DescriptorHeapType)
proc CreateRootSignature*(This: ptr ID3D12Device; nodeMask: UINT;pBlobWithRootSignature: pointer;blobLengthInBytes: SIZE_T; riid: ptr IID;ppvRootSignature: ptr pointer): HRESULT = This.lpVtbl.CreateRootSignature(This, nodeMask,pBlobWithRootSignature,blobLengthInBytes, riid, ppvRootSignature)
proc CreateConstantBufferView*(This: ptr ID3D12Device; pDesc: ptr D3D12_CONSTANT_BUFFER_VIEW_DESC;DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) = This.lpVtbl.CreateConstantBufferView(This, pDesc,DestDescriptor)
proc CreateShaderResourceView*(This: ptr ID3D12Device;pResource: ptr ID3D12Resource; pDesc: ptr D3D12_SHADER_RESOURCE_VIEW_DESC;DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) = This.lpVtbl.CreateShaderResourceView(This,pResource, pDesc,DestDescriptor)
proc CreateUnorderedAccessView*(This: ptr ID3D12Device;pResource: ptr ID3D12Resource;pCounterResource: ptr ID3D12Resource;pDesc: ptr D3D12_UNORDERED_ACCESS_VIEW_DESC; DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) = This.lpVtbl.CreateUnorderedAccessView(This,pResource,pCounterResource,pDesc,DestDescriptor)
proc CreateRenderTargetView*(This: ptr ID3D12Device;pResource: ptr ID3D12Resource;pDesc: ptr D3D12_RENDER_TARGET_VIEW_DESC;DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) = This.lpVtbl.CreateRenderTargetView(This,pResource,pDesc,DestDescriptor)
proc CreateDepthStencilView*(This: ptr ID3D12Device;pResource: ptr ID3D12Resource;pDesc: ptr D3D12_DEPTH_STENCIL_VIEW_DESC;DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) = This.lpVtbl.CreateDepthStencilView(This,pResource,pDesc,DestDescriptor)
proc CreateSampler*(This: ptr ID3D12Device; pDesc: ptr D3D12_SAMPLER_DESC;DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) = This.lpVtbl.CreateSampler(This, pDesc,DestDescriptor)
proc CopyDescriptors*(This: ptr ID3D12Device; NumDestDescriptorRanges: UINT; pDestDescriptorRangeStarts: ptr D3D12_CPU_DESCRIPTOR_HANDLE; pDestDescriptorRangeSizes: ptr UINT; NumSrcDescriptorRanges: UINT; pSrcDescriptorRangeStarts: ptr D3D12_CPU_DESCRIPTOR_HANDLE; pSrcDescriptorRangeSizes: ptr UINT;DescriptorHeapsType: D3D12_DESCRIPTOR_HEAP_TYPE) = This.lpVtbl.CopyDescriptors(This, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes,DescriptorHeapsType)
proc CopyDescriptorsSimple*(This: ptr ID3D12Device; NumDescriptors: UINT;DestDescriptorRangeStart: D3D12_CPU_DESCRIPTOR_HANDLE;SrcDescriptorRangeStart: D3D12_CPU_DESCRIPTOR_HANDLE;DescriptorHeapsType: D3D12_DESCRIPTOR_HEAP_TYPE) = This.lpVtbl.CopyDescriptorsSimple(This, NumDescriptors,DestDescriptorRangeStart,SrcDescriptorRangeStart,DescriptorHeapsType)
proc GetResourceAllocationInfo*(This: ptr ID3D12Device; visibleMask: UINT;numResourceDescs: UINT;pResourceDescs: ptr D3D12_RESOURCE_DESC): D3D12_RESOURCE_ALLOCATION_INFO = This.lpVtbl.GetResourceAllocationInfo(This, visibleMask,numResourceDescs,pResourceDescs)
proc GetCustomHeapProperties*(This: ptr ID3D12Device; nodeMask: UINT;heapType: D3D12_HEAP_TYPE): D3D12_HEAP_PROPERTIES = This.lpVtbl.GetCustomHeapProperties(This, nodeMask,heapType)
proc CreateCommittedResource*(This: ptr ID3D12Device; pHeapProperties: ptr D3D12_HEAP_PROPERTIES; HeapFlags: D3D12_HEAP_FLAGS; pResourceDesc: ptr D3D12_RESOURCE_DESC; InitialResourceState: D3D12_RESOURCE_STATES; pOptimizedClearValue: ptr D3D12_CLEAR_VALUE; riidResource: ptr IID;ppvResource: ptr pointer): HRESULT = This.lpVtbl.CreateCommittedResource(This, pHeapProperties, HeapFlags, pResourceDesc, InitialResourceState, pOptimizedClearValue, riidResource,ppvResource)
proc CreateHeap*(This: ptr ID3D12Device; pDesc: ptr D3D12_HEAP_DESC;riid: ptr IID;ppvHeap: ptr pointer): HRESULT = This.lpVtbl.CreateHeap(This, pDesc,riid,ppvHeap)
proc CreatePlacedResource*(This: ptr ID3D12Device; pHeap: ptr ID3D12Heap; HeapOffset: UINT64; pDesc: ptr D3D12_RESOURCE_DESC; InitialState: D3D12_RESOURCE_STATES; pOptimizedClearValue: ptr D3D12_CLEAR_VALUE; riid: ptr IID;ppvResource: ptr pointer): HRESULT = This.lpVtbl.CreatePlacedResource(This, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid,ppvResource)
proc CreateReservedResource*(This: ptr ID3D12Device; pDesc: ptr D3D12_RESOURCE_DESC; InitialState: D3D12_RESOURCE_STATES; pOptimizedClearValue: ptr D3D12_CLEAR_VALUE; riid: ptr IID;ppvResource: ptr pointer): HRESULT = This.lpVtbl.CreateReservedResource(This, pDesc, InitialState, pOptimizedClearValue, riid,ppvResource)
proc CreateSharedHandle*(This: ptr ID3D12Device;pObject: ptr ID3D12DeviceChild;pAttributes: ptr SECURITY_ATTRIBUTES;Access: DWORD; Name: LPCWSTR; pHandle: ptr HANDLE): HRESULT = This.lpVtbl.CreateSharedHandle(This,pObject,pAttributes,Access,Name,pHandle)
proc OpenSharedHandle*(This: ptr ID3D12Device; NTHandle: HANDLE;riid: ptr IID;ppvObj: ptr pointer): HRESULT = This.lpVtbl.OpenSharedHandle(This, NTHandle,riid,ppvObj)
proc OpenSharedHandleByName*(This: ptr ID3D12Device; Name: LPCWSTR;Access: DWORD;pNTHandle: ptr HANDLE): HRESULT = This.lpVtbl.OpenSharedHandleByName(This, Name,Access,pNTHandle)             # [annotation][out]
proc MakeResident*(This: ptr ID3D12Device; NumObjects: UINT;ppObjects: ptr ptr ID3D12Pageable): HRESULT = This.lpVtbl.MakeResident(This, NumObjects,ppObjects)
proc Evict*(This: ptr ID3D12Device; NumObjects: UINT;ppObjects: ptr ptr ID3D12Pageable): HRESULT = This.lpVtbl.Evict(This, NumObjects,ppObjects)
proc CreateFence*(This: ptr ID3D12Device; InitialValue: UINT64;Flags: D3D12_FENCE_FLAGS; riid: ptr IID;ppFence: ptr pointer): HRESULT = This.lpVtbl.CreateFence(This, InitialValue,Flags, riid, ppFence)
proc GetDeviceRemovedReason*(This: ptr ID3D12Device): HRESULT = This.lpVtbl.GetDeviceRemovedReason(This)
proc GetCopyableFootprints*(This: ptr ID3D12Device; pResourceDesc: ptr D3D12_RESOURCE_DESC; FirstSubresource: UINT; NumSubresources: UINT; BaseOffset: UINT64; pLayouts: ptr D3D12_PLACED_SUBRESOURCE_FOOTPRINT; pNumRows: ptr UINT; pRowSizeInBytes: ptr UINT64;pTotalBytes: ptr UINT64) = This.lpVtbl.GetCopyableFootprints(This, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes,pTotalBytes)
proc CreateQueryHeap*(This: ptr ID3D12Device;pDesc: ptr D3D12_QUERY_HEAP_DESC; riid: ptr IID;ppvHeap: ptr pointer): HRESULT = This.lpVtbl.CreateQueryHeap(This,pDesc, riid,ppvHeap)
proc SetStablePowerState*(This: ptr ID3D12Device;Enable: BOOL): HRESULT = This.lpVtbl.SetStablePowerState(This,Enable)
proc CreateCommandSignature*(This: ptr ID3D12Device; pDesc: ptr D3D12_COMMAND_SIGNATURE_DESC; pRootSignature: ptr ID3D12RootSignature; riid: ptr IID;ppvCommandSignature: ptr pointer): HRESULT = This.lpVtbl.CreateCommandSignature(This, pDesc, pRootSignature, riid,ppvCommandSignature)
proc GetResourceTiling*(This: ptr ID3D12Device; pTiledResource: ptr ID3D12Resource; pNumTilesForEntireResource: ptr UINT; pPackedMipDesc: ptr D3D12_PACKED_MIP_INFO; pStandardTileShapeForNonPackedMips: ptr D3D12_TILE_SHAPE; pNumSubresourceTilings: ptr UINT; FirstSubresourceTilingToGet: UINT;pSubresourceTilingsForNonPackedMips: ptr D3D12_SUBRESOURCE_TILING) = This.lpVtbl.GetResourceTiling(This, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet,pSubresourceTilingsForNonPackedMips)
proc GetAdapterLuid*(This: ptr ID3D12Device): LUID = This.lpVtbl.GetAdapterLuid(This)

#ID3D12DebugVtbl
proc QueryInterface*(This: ptr ID3D12Debug; riid: ptr IID;ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid,ppvObject)
proc AddRef*(This: ptr ID3D12Debug): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12Debug): ULONG = This.lpVtbl.Release(This)
proc EnableDebugLayer*(This: ptr ID3D12Debug) = This.lpVtbl.EnableDebugLayer(This)

#ID3D12DebugDevice
proc QueryInterface*(This: ptr ID3D12DebugDevice; riid: ptr IID;ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid,ppvObject)
proc AddRef*(This: ptr ID3D12DebugDevice): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12DebugDevice): ULONG = This.lpVtbl.Release(This)
proc SetFeatureMask*(This: ptr ID3D12DebugDevice;Mask: D3D12_DEBUG_FEATURE): HRESULT = This.lpVtbl.SetFeatureMask(This,Mask)
proc GetFeatureMask*(This: ptr ID3D12DebugDevice): D3D12_DEBUG_FEATURE = This.lpVtbl.GetFeatureMask(This)
proc ReportLiveDeviceObjects*(This: ptr ID3D12DebugDevice;Flags: D3D12_RLDO_FLAGS): HRESULT = This.lpVtbl.ReportLiveDeviceObjects(This,Flags)


#ID3D12DebugCommandQueue
proc QueryInterface*(This: ptr ID3D12DebugCommandQueue; riid: ptr IID;ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid,ppvObject)
proc AddRef*(This: ptr ID3D12DebugCommandQueue): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12DebugCommandQueue): ULONG = This.lpVtbl.Release(This)
proc AssertResourceState*(This: ptr ID3D12DebugCommandQueue;pResource: ptr ID3D12Resource;Subresource: UINT; State: UINT): BOOL = This.lpVtbl.AssertResourceState(This,pResource,Subresource, State)

#ID3D12DebugCommandList
proc QueryInterface*(This: ptr ID3D12DebugCommandList; riid: ptr IID;ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid,ppvObject)
proc AddRef*(This: ptr ID3D12DebugCommandList): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12DebugCommandList): ULONG = This.lpVtbl.Release(This)
proc AssertResourceState*(This: ptr ID3D12DebugCommandList;pResource: ptr ID3D12Resource;Subresource: UINT; State: UINT): BOOL = This.lpVtbl.AssertResourceState(This,pResource,Subresource, State)
proc SetFeatureMask*(This: ptr ID3D12DebugCommandList;Mask: D3D12_DEBUG_FEATURE): HRESULT = This.lpVtbl.SetFeatureMask(This,Mask)
proc GetFeatureMask*(This: ptr ID3D12DebugCommandList): D3D12_DEBUG_FEATURE = This.lpVtbl.GetFeatureMask(This)

#ID3D12InfoQueue
proc QueryInterface*(This: ptr ID3D12InfoQueue; riid: ptr IID;ppvObject: ptr pointer): HRESULT = This.lpVtbl.QueryInterface(This, riid,ppvObject)
proc AddRef*(This: ptr ID3D12InfoQueue): ULONG = This.lpVtbl.AddRef(This)
proc Release*(This: ptr ID3D12InfoQueue): ULONG = This.lpVtbl.Release(This)
proc SetMessageCountLimit*(This: ptr ID3D12InfoQueue;MessageCountLimit: UINT64): HRESULT = This.lpVtbl.SetMessageCountLimit(This,MessageCountLimit)
proc ClearStoredMessages*(This: ptr ID3D12InfoQueue) = This.lpVtbl.ClearStoredMessages(This)
proc GetMessageA*(This: ptr ID3D12InfoQueue; MessageIndex: UINT64;pMessage: ptr D3D12_MESSAGE;pMessageByteLength: ptr SIZE_T): HRESULT = This.lpVtbl.GetMessageA(This, MessageIndex,pMessage,pMessageByteLength)
proc GetNumMessagesAllowedByStorageFilter*(This: ptr ID3D12InfoQueue): UINT64 = This.lpVtbl.GetNumMessagesAllowedByStorageFilter(This)
proc GetNumMessagesDeniedByStorageFilter*(This: ptr ID3D12InfoQueue): UINT64 = This.lpVtbl.GetNumMessagesDeniedByStorageFilter(This)
proc GetNumStoredMessages*(This: ptr ID3D12InfoQueue): UINT64 = This.lpVtbl.GetNumStoredMessages(This)
proc GetNumStoredMessagesAllowedByRetrievalFilter*(This: ptr ID3D12InfoQueue): UINT64 = This.lpVtbl.GetNumStoredMessagesAllowedByRetrievalFilter(This)
proc GetNumMessagesDiscardedByMessageCountLimit*(This: ptr ID3D12InfoQueue): UINT64 = This.lpVtbl.GetNumMessagesDiscardedByMessageCountLimit(This)
proc GetMessageCountLimit*(This: ptr ID3D12InfoQueue): UINT64 = This.lpVtbl.GetMessageCountLimit(This)
proc AddStorageFilterEntries*(This: ptr ID3D12InfoQueue;pFilter: ptr D3D12_INFO_QUEUE_FILTER): HRESULT = This.lpVtbl.AddStorageFilterEntries(This,pFilter)
proc GetStorageFilter*(This: ptr ID3D12InfoQueue;pFilter: ptr D3D12_INFO_QUEUE_FILTER;pFilterByteLength: ptr SIZE_T): HRESULT = This.lpVtbl.GetStorageFilter(This,pFilter,pFilterByteLength)
proc ClearStorageFilter*(This: ptr ID3D12InfoQueue) = This.lpVtbl.ClearStorageFilter(This)
proc PushEmptyStorageFilter*(This: ptr ID3D12InfoQueue): HRESULT = This.lpVtbl.PushEmptyStorageFilter(This)
proc PushCopyOfStorageFilter*(This: ptr ID3D12InfoQueue): HRESULT = This.lpVtbl.PushCopyOfStorageFilter(This)
proc PushStorageFilter*(This: ptr ID3D12InfoQueue;pFilter: ptr D3D12_INFO_QUEUE_FILTER): HRESULT = This.lpVtbl.PushStorageFilter(This,pFilter)
proc PopStorageFilter*(This: ptr ID3D12InfoQueue) = This.lpVtbl.PopStorageFilter(This)
proc GetStorageFilterStackSize*(This: ptr ID3D12InfoQueue): UINT = This.lpVtbl.GetStorageFilterStackSize(This)
proc AddRetrievalFilterEntries*(This: ptr ID3D12InfoQueue;pFilter: ptr D3D12_INFO_QUEUE_FILTER): HRESULT = This.lpVtbl.AddRetrievalFilterEntries(This,pFilter)
proc GetRetrievalFilter*(This: ptr ID3D12InfoQueue;pFilter: ptr D3D12_INFO_QUEUE_FILTER;pFilterByteLength: ptr SIZE_T): HRESULT = This.lpVtbl.GetRetrievalFilter(This,pFilter,pFilterByteLength)
proc ClearRetrievalFilter*(This: ptr ID3D12InfoQueue) = This.lpVtbl.ClearRetrievalFilter(This)
proc PushEmptyRetrievalFilter*(This: ptr ID3D12InfoQueue): HRESULT = This.lpVtbl.PushEmptyRetrievalFilter(This)
proc PushCopyOfRetrievalFilter*(This: ptr ID3D12InfoQueue): HRESULT = This.lpVtbl.PushCopyOfRetrievalFilter(This)
proc PushRetrievalFilter*(This: ptr ID3D12InfoQueue;pFilter: ptr D3D12_INFO_QUEUE_FILTER): HRESULT = This.lpVtbl.PushRetrievalFilter(This,pFilter)
proc PopRetrievalFilter*(This: ptr ID3D12InfoQueue) = This.lpVtbl.PopRetrievalFilter(This)
proc GetRetrievalFilterStackSize*(This: ptr ID3D12InfoQueue): UINT = This.lpVtbl.GetRetrievalFilterStackSize(This)
proc AddMessage*(This: ptr ID3D12InfoQueue;Category: D3D12_MESSAGE_CATEGORY;Severity: D3D12_MESSAGE_SEVERITY; ID: cint;pDescription: LPCSTR): HRESULT = This.lpVtbl.AddMessage(This,Category,Severity, ID,pDescription)
proc AddApplicationMessage*(This: ptr ID3D12InfoQueue;Severity: D3D12_MESSAGE_SEVERITY;pDescription: LPCSTR): HRESULT = This.lpVtbl.AddApplicationMessage(This,Severity,pDescription)
proc SetBreakOnCategory*(This: ptr ID3D12InfoQueue;Category: D3D12_MESSAGE_CATEGORY;bEnable: BOOL): HRESULT = This.lpVtbl.SetBreakOnCategory(This,Category,bEnable)
proc SetBreakOnSeverity*(This: ptr ID3D12InfoQueue;Severity: D3D12_MESSAGE_SEVERITY;bEnable: BOOL): HRESULT = This.lpVtbl.SetBreakOnSeverity(This,Severity,bEnable)
proc SetBreakOnID*(This: ptr ID3D12InfoQueue; ID: cint;bEnable: BOOL): HRESULT = This.lpVtbl.SetBreakOnID(This, ID,bEnable)
proc GetBreakOnCategory*(This: ptr ID3D12InfoQueue;Category: D3D12_MESSAGE_CATEGORY): BOOL = This.lpVtbl.GetBreakOnCategory(This,Category)
proc GetBreakOnSeverity*(This: ptr ID3D12InfoQueue;Severity: D3D12_MESSAGE_SEVERITY): BOOL = This.lpVtbl.GetBreakOnSeverity(This,Severity)
proc GetBreakOnID*(This: ptr ID3D12InfoQueue;ID: cint): BOOL = This.lpVtbl.GetBreakOnID(This,ID)
proc SetMuteDebugOutput*(This: ptr ID3D12InfoQueue;bMute: BOOL) = This.lpVtbl.SetMuteDebugOutput(This,bMute)
proc GetMuteDebugOutput*(This: ptr ID3D12InfoQueue): BOOL = This.lpVtbl.GetMuteDebugOutput(This)
